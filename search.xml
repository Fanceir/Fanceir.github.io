<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Codeforces Round 922 (Div. 2)</title>
    <url>/2024/01/31/Codeforces-Round-922-Div-2/</url>
    <content><![CDATA[<h1 id="codeforces-round-922-div-2"><a class="markdownIt-Anchor" href="#codeforces-round-922-div-2"></a> Codeforces Round 922 (Div. 2)</h1>
<h2 id="昨天晚上的cf我没有本事随便写写吧"><a class="markdownIt-Anchor" href="#昨天晚上的cf我没有本事随便写写吧"></a> 昨天晚上的cf，我没有本事，随便写写吧</h2>
<h3 id="a"><a class="markdownIt-Anchor" href="#a"></a> A</h3>
<p>第一题就是贪心，怎么去放这个砖头呢
尽量横着放，m*(n/2)就是答案</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    ll ans = n * (m / <span class="number">2</span>);</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="b"><a class="markdownIt-Anchor" href="#b"></a> B</h3>
<p>如何证明可以看这个<a href="https://zhuanlan.zhihu.com/p/680671108">知乎大佬的证明</a></p>
<p>只要有一个是有序的就是最佳的，排一个序，结束了</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a, b;</span><br><span class="line">&#125; e[<span class="number">2</span> * maxn];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node a, node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.a &lt; b.a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; e[i].a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; e[i].b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(e + <span class="number">1</span>, e + <span class="number">1</span> + n, cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; e[i].a &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; e[i].b &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="c"><a class="markdownIt-Anchor" href="#c"></a> C</h3>
<p>贪心，从高位开始贪心，尽可能地使 x 的每一位为 1，以使 a⊕x 和 b⊕x 的差最小，同时还要确保 x 不超过 r。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll a, b, r;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b &gt;&gt; r;</span><br><span class="line">    ll x = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">62</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        ll ba = (a &gt;&gt; i) &amp; <span class="number">1</span>;</span><br><span class="line">        ll bb = (b &gt;&gt; i) &amp; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (ba == bb)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        ll v = (bb == <span class="number">1</span>) ? <span class="number">-1ll</span> &lt;&lt; i : <span class="number">1ll</span> &lt;&lt; i;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">abs</span>(ans + v) &lt;= <span class="built_in">abs</span>(ans - v))</span><br><span class="line">            ans += v;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (r &gt;= (<span class="number">1ll</span> &lt;&lt; i))</span><br><span class="line">        &#123;</span><br><span class="line">            r -= (<span class="number">1ll</span> &lt;&lt; i);</span><br><span class="line">            x += (<span class="number">1ll</span> &lt;&lt; i);</span><br><span class="line">            ans -= v;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ans += v;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">abs</span>((a ^ x) - (b ^ x)) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>拓扑排序</title>
    <url>/2024/01/31/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h1 id="拓扑排序"><a class="markdownIt-Anchor" href="#拓扑排序"></a> 拓扑排序</h1>
<p>今天写个拓扑排序，这是图论的内容，之前在学的时候没学好，第一次培训这个拓扑排序也没做出来。
啥是拓扑排序呢？</p>
<blockquote>
<p>拓扑排序是对有向无环图的顶点的一种排序，它使得如果存在一条从顶点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">u</span></span></span></span> 到顶点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span></span></span> 的路径，那么在排序中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">u</span></span></span></span> 出现在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span></span></span> 的前面。例如，一个拓扑排序为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>v</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>v</mi><mn>3</mn></msub><mo separator="true">,</mo><msub><mi>v</mi><mn>4</mn></msub><mo separator="true">,</mo><msub><mi>v</mi><mn>5</mn></msub></mrow><annotation encoding="application/x-tex">v_1,v_2,v_3,v_4,v_5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，那么对于任何 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">v_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">v_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 的边，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">v_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 都出现在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">v_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 的前面。拓扑排序的结果不是唯一的。拓扑排序可以用来判断一个有向图是否是无环图。有向无环图（DAG）才有拓扑排序。</p>
</blockquote>
<blockquote>
<p>就像是你烧菜需要先把菜洗了，然后切了，然后炒了，最后才能吃，这就是一个拓扑排序，你不能先吃了再切菜，这样就不对了，这就是一个有向无环图，有向是因为你不能反过来，无环是因为你不能循环，你不能先吃了再切菜，然后再吃了，然后再切菜，这样就循环了，所以这是一个有向无环图，这就是拓扑排序。</p>
</blockquote>
<p>先来一道例题吧</p>
<p>You are given 5 different sizes of kitchen plates. Each plate is marked with a letter <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">A</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi></mrow><annotation encoding="application/x-tex">C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>D</mi></mrow><annotation encoding="application/x-tex">D</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span></span></span></span>, or <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi></mrow><annotation encoding="application/x-tex">E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span></span></span></span>. You are given 5 statements comparing two different plates, you need to rearrange the plates from smallest size to biggest size. For example: the sizes of these plates.
<img src="https://espresso.codeforces.com/39269782371c984cd42f2d62db51ae91b9ceb12d.png" alt="" />
<strong>Input</strong></p>
<p>The input consist of 5 lines. In each line there will be 3 characters, the first and last character will be either <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">A</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi></mrow><annotation encoding="application/x-tex">C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>D</mi></mrow><annotation encoding="application/x-tex">D</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span></span></span></span>, or <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi></mrow><annotation encoding="application/x-tex">E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span></span></span></span> and the middle character will be either <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>&lt;</mo></mrow><annotation encoding="application/x-tex">&lt;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&lt;</span></span></span></span> or <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>&gt;</mo></mrow><annotation encoding="application/x-tex">&gt;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&gt;</span></span></span></span> describing the comparison between two plates sizes. No two plates will be equal.</p>
<p><strong>Output</strong></p>
<p>The output consist of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>5</mn></mrow><annotation encoding="application/x-tex">5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span></span></span></span> characters, the sorted order of balls from smallest to biggest plate. Otherwise, if the statements are contradicting print <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mi>m</mi><mi>p</mi><mi>o</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>b</mi><mi>l</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">impossible</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">i</span><span class="mord mathnormal">m</span><span class="mord mathnormal">p</span><span class="mord mathnormal">o</span><span class="mord mathnormal">s</span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">b</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span></span></span></span>. If there are multiple answers, print any of them.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> degree[<span class="number">5</span>];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">toposort</span><span class="params">(vector&lt;<span class="type">int</span>&gt; G[], <span class="type">int</span> degree[])</span> <span class="comment">// G是邻接表，degree是入度数组</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q; <span class="comment">// 存放入度为0的点</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (degree[i] == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            q.<span class="built_in">push</span>(i); <span class="comment">// 入度为0的点入队</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        ans.<span class="built_in">push_back</span>(u);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G[u].<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> v = G[u][i];</span><br><span class="line">            degree[v]--;</span><br><span class="line">            <span class="keyword">if</span> (degree[v] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t = <span class="number">5</span>;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; G[t];</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        string s;</span><br><span class="line">        cin &gt;&gt; s;</span><br><span class="line">        <span class="type">int</span> a = s[<span class="number">0</span>] - <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        <span class="type">int</span> b = s[<span class="number">2</span>] - <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        <span class="type">char</span> op = s[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="string">&#x27;&lt;&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            G[a].<span class="built_in">push_back</span>(b);</span><br><span class="line">            degree[b]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            G[b].<span class="built_in">push_back</span>(a);</span><br><span class="line">            degree[a]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">toposort</span>(G, degree);</span><br><span class="line">    <span class="keyword">if</span> (ans.<span class="built_in">size</span>() &lt; <span class="number">5</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;impossible&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ans.<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="built_in">char</span>(ans[i] + <span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>有N个比赛队（1&lt;=N&lt;=500），编号依次为1，2，3，。。。。，N进行比赛，比赛结束后，裁判委员会要将所有参赛队伍从前往后依次排名，但现在裁判委员会不能直接获得每个队的比赛成绩，只知道每场比赛的结果，即P1赢P2，用P1，P2表示，排名时P1在P2之前。现在请你编程序确定排名。</p>
<p><strong>Input</strong></p>
<p>输入有若干组，每组中的第一行为二个数N（1&lt;=N&lt;=500），M；其中N表示队伍的个数，M表示接着有M行的输入数据。接下来的M行数据中，每行也有两个整数P1，P2表示即P1队赢了P2队。</p>
<p><strong>Output</strong></p>
<p>给出一个符合要求的排名。输出时队伍号之间有空格，最后一名后面没有空格。</p>
<p>其他说明：符合条件的排名可能不是唯一的，此时要求输出时编号小的队伍在前；输入数据保证是正确的，即输入数据确保一定能有一个符合要求的排名。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">toposort</span><span class="params">(vector&lt;<span class="type">int</span>&gt; G[], vector&lt;<span class="type">int</span>&gt; degree)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; ans; <span class="comment">// 答案队列</span></span><br><span class="line">    priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt;&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (degree[i] == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            q.<span class="built_in">push</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u = q.<span class="built_in">top</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        ans.<span class="built_in">push</span>(u);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G[u].<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> v = G[u][i];</span><br><span class="line">            degree[v]--;</span><br><span class="line">            <span class="keyword">if</span> (degree[v] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!ans.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; ans.<span class="built_in">front</span>() + <span class="number">1</span> &lt;&lt; <span class="string">&quot; &quot;</span>; <span class="comment">// 之前把编号减了一，这里要加回来</span></span><br><span class="line">        ans.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m))</span><br><span class="line">    &#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; G[n];</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">degree</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> x, y;</span><br><span class="line">            cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">            G[x - <span class="number">1</span>].<span class="built_in">push_back</span>(y - <span class="number">1</span>); <span class="comment">// 因为这里是从1开始的，所以要减一</span></span><br><span class="line">            degree[y - <span class="number">1</span>]++;           <span class="comment">// 入度加一</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">toposort</span>(G, degree);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>寒假新生第一周第一天</title>
    <url>/2024/01/22/%E5%AF%92%E5%81%87%E6%96%B0%E7%94%9F%E7%AC%AC%E4%B8%80%E5%91%A8%E7%AC%AC%E4%B8%80%E5%A4%A9/</url>
    <content><![CDATA[<h1 id="stl库的基本操作之sort"><a class="markdownIt-Anchor" href="#stl库的基本操作之sort"></a> stl库的基本操作之sort</h1>
<p>当然如果你想快速写可以配置一下万能头文件，这样可以省去你一开始做题写头文件的麻烦。
<strong>#include &lt;bits/stdc++.h&gt;</strong></p>
<h2 id="sort"><a class="markdownIt-Anchor" href="#sort"></a> sort</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//简单排序，从小到大</span></span><br><span class="line"><span class="comment">/*在大一的C语言的时候我们学习了一个叫做冒泡排序的算法，一般是要写一个很长的程序，在这里你可以使用一个很简单的sort就能够搞定了*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a[<span class="number">10005</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n; <span class="comment">// n个元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>, a + <span class="number">1</span> + n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>很方便，但是如果我要从大到小去排序又该怎么办呢</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a[<span class="number">10005</span>];</span><br><span class="line"><span class="comment">// 这里没有使用一个vector，以后学了你可以自己使用</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>, a + <span class="number">1</span> + n, cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重要的是还有结构体对吗，结构体应该还记得吧</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">int</span> y;</span><br><span class="line">&#125; a[<span class="number">10005</span>];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node s1, node s2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s<span class="number">1.</span>x &lt; s<span class="number">2.</span>x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a[i].x &gt;&gt; a[i].y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>, a + <span class="number">1</span> + n, cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; a[i].x &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; a[i].y &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="t1"><a class="markdownIt-Anchor" href="#t1"></a> T1</h2>
<h3 id="given-n-points-in-a-two-dimensional-space-sort-all-the-points-in-ascending-order"><a class="markdownIt-Anchor" href="#given-n-points-in-a-two-dimensional-space-sort-all-the-points-in-ascending-order"></a> Given <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span> points in a two dimensional space, sort all the points in ascending order.</h3>
<pre><code>(x1, y1) &gt; (x2, y2) if and only if (x1 &gt; x2) or (x1 == x2 and y1 &lt; y2)
</code></pre>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line"></span><br><span class="line">&#125; a[<span class="number">1000005</span>];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node a, node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.x == b.x)</span><br><span class="line">        <span class="keyword">return</span> a.y &gt; b.y;</span><br><span class="line">    <span class="keyword">return</span> a.x &lt; b.x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a[i].x, &amp;a[i].y);</span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>, a + n + <span class="number">1</span>, cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, a[i].x, a[i].y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="t2"><a class="markdownIt-Anchor" href="#t2"></a> T2</h2>
<p>If any two heroes have same accuracy, speed and stupidity, sort them based on their name alphabetically.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    string name;</span><br><span class="line">    <span class="type">int</span> x, y, z;</span><br><span class="line">&#125; a[<span class="number">1000005</span>];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node a, node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.x != b.x)</span><br><span class="line">        <span class="keyword">return</span> a.x &gt; b.x;</span><br><span class="line">    <span class="keyword">if</span> (a.y != b.y)</span><br><span class="line">        <span class="keyword">return</span> a.y &gt; b.y;</span><br><span class="line">    <span class="keyword">if</span> (a.z != b.z)</span><br><span class="line">        <span class="keyword">return</span> a.z &lt; b.z;</span><br><span class="line">    <span class="keyword">return</span> a.name &lt; b.name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        cin &gt;&gt; a[i].name &gt;&gt; a[i].x &gt;&gt; a[i].y &gt;&gt; a[i].z;</span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>, a + n + <span class="number">1</span>, cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        cout &lt;&lt; a[i].name &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>新生训练</tag>
      </tags>
  </entry>
  <entry>
    <title>codeforces round 923</title>
    <url>/2024/02/09/Codeforces-Round-923-Div-3/</url>
    <content><![CDATA[<h1 id="a"><a class="markdownIt-Anchor" href="#a"></a> A</h1>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    string s;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    <span class="type">int</span> pos1 = <span class="number">-1</span>, pos2 = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == <span class="string">&#x27;B&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            pos1 = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == <span class="string">&#x27;B&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            pos2 = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; pos2 - pos1 + <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t = <span class="number">1</span>;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="b"><a class="markdownIt-Anchor" href="#b"></a> B</h1>
<p>出现0就加一个数，出现1就重复第一个字母，简单模拟就可以实现。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="type">int</span> cnt[<span class="number">200005</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="built_in">sizeof</span>(cnt));</span><br><span class="line">    string s = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        <span class="keyword">if</span> (a[i] == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            s += <span class="string">&#x27;a&#x27;</span> + cnt[<span class="number">0</span>];</span><br><span class="line">            cnt[<span class="number">0</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            s += <span class="string">&#x27;a&#x27;</span> + cnt[a[i]];</span><br><span class="line">            cnt[a[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t = <span class="number">1</span>;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="c"><a class="markdownIt-Anchor" href="#c"></a> C</h1>
<p>题目要求选数字，那我们肯定要选择特有的，这样才能尽可能满足题目的要求所以我们定义了<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">s_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">s_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 一个用来存储a数组中满足条件的数字，一个存储b数组中满足条件的数字，然后列出特有的数目，如果超过了不能实现输出<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mi>O</mi></mrow><annotation encoding="application/x-tex">NO</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span></span></span></span> 其余的输出<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Y</mi><mi>E</mi><mi>S</mi></mrow><annotation encoding="application/x-tex">YES</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> m, n, k;</span><br><span class="line">    cin &gt;&gt; m &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(m)</span>, <span class="title">b</span><span class="params">(n)</span></span>;</span><br><span class="line">    set&lt;<span class="type">int</span>&gt; s1, s2, s3, s;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">        <span class="keyword">if</span> (a[i] &lt;= k)</span><br><span class="line">        &#123;</span><br><span class="line">            s<span class="number">1.</span><span class="built_in">insert</span>(a[i]);</span><br><span class="line">            s.<span class="built_in">insert</span>(a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;b[i]);</span><br><span class="line">        <span class="keyword">if</span> (b[i] &lt;= k)</span><br><span class="line">        &#123;</span><br><span class="line">            s<span class="number">2.</span><span class="built_in">insert</span>(b[i]);</span><br><span class="line">            s.<span class="built_in">insert</span>(b[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (s.<span class="built_in">size</span>() &lt; k)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> cnt1 = <span class="number">0</span>, cnt2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!s<span class="number">1.</span><span class="built_in">count</span>(i) &amp;&amp; s<span class="number">2.</span><span class="built_in">count</span>(i))</span><br><span class="line">            &#123;</span><br><span class="line">                cnt1++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s<span class="number">1.</span><span class="built_in">count</span>(i) &amp;&amp; !s<span class="number">2.</span><span class="built_in">count</span>(i))</span><br><span class="line">            &#123;</span><br><span class="line">                cnt2++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cnt1 &gt; k / <span class="number">2</span> || cnt2 &gt; k / <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t = <span class="number">1</span>;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="d"><a class="markdownIt-Anchor" href="#d"></a> D</h1>
<p>这道题目是一个很简单的模拟题目，我们只需要找到下一个不相等的数字就可以了，如果没有就输出-1 -1</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">&#x27;0&#x27;</span> || ch &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            f = <span class="number">-1</span>;</span><br><span class="line">        ch = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x = x * <span class="number">10</span> + ch - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        ch = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    n = <span class="built_in">read</span>();</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>)</span>, <span class="title">next_not</span><span class="params">(n + <span class="number">1</span>, <span class="number">-1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i] = <span class="built_in">read</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] == a[i + <span class="number">1</span>])</span><br><span class="line">            next_not[i] = next_not[i + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            next_not[i] = i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> q;</span><br><span class="line">    q = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">while</span> (q--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> l, r;</span><br><span class="line">        l = <span class="built_in">read</span>();</span><br><span class="line">        r = <span class="built_in">read</span>();</span><br><span class="line">        <span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (next_not[l] != <span class="number">-1</span> &amp;&amp; next_not[l] &lt;= r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">write</span>(l);</span><br><span class="line">            <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">            <span class="built_in">write</span>(next_not[l]);</span><br><span class="line">            <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">write</span>(<span class="number">-1</span>);</span><br><span class="line">            <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">            <span class="built_in">write</span>(<span class="number">-1</span>);</span><br><span class="line">            <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t = <span class="number">1</span>;</span><br><span class="line">    t = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="e"><a class="markdownIt-Anchor" href="#e"></a> E</h1>
<p>构造题，观察样例可以看到规律
可惜最后代码t了，赛后交的</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, k;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="type">int</span> m = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt;= n; j += k)</span><br><span class="line">            &#123;</span><br><span class="line">                a[j] = m++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = n - (n - i) % k; j &gt;= <span class="number">1</span>; j -= k)</span><br><span class="line">            &#123;</span><br><span class="line">                a[j] = m++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>codeforces round 923</title>
    <url>/2024/02/09/codeforces-round-923/</url>
    <content><![CDATA[<h1 id="a"><a class="markdownIt-Anchor" href="#a"></a> A</h1>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    string s;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    <span class="type">int</span> pos1 = <span class="number">-1</span>, pos2 = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == <span class="string">&#x27;B&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            pos1 = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == <span class="string">&#x27;B&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            pos2 = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; pos2 - pos1 + <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t = <span class="number">1</span>;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="b"><a class="markdownIt-Anchor" href="#b"></a> B</h1>
<p>出现0就加一个数，出现1就重复第一个字母，简单模拟就可以实现。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="type">int</span> cnt[<span class="number">200005</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="built_in">sizeof</span>(cnt));</span><br><span class="line">    string s = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        <span class="keyword">if</span> (a[i] == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            s += <span class="string">&#x27;a&#x27;</span> + cnt[<span class="number">0</span>];</span><br><span class="line">            cnt[<span class="number">0</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            s += <span class="string">&#x27;a&#x27;</span> + cnt[a[i]];</span><br><span class="line">            cnt[a[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t = <span class="number">1</span>;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="c"><a class="markdownIt-Anchor" href="#c"></a> C</h1>
<p>题目要求选数字，那我们肯定要选择特有的，这样才能尽可能满足题目的要求所以我们定义了<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">s_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">s_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 一个用来存储a数组中满足条件的数字，一个存储b数组中满足条件的数字，然后列出特有的数目，如果超过了不能实现输出<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mi>O</mi></mrow><annotation encoding="application/x-tex">NO</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span></span></span></span> 其余的输出<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Y</mi><mi>E</mi><mi>S</mi></mrow><annotation encoding="application/x-tex">YES</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> m, n, k;</span><br><span class="line">    cin &gt;&gt; m &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(m)</span>, <span class="title">b</span><span class="params">(n)</span></span>;</span><br><span class="line">    set&lt;<span class="type">int</span>&gt; s1, s2, s3, s;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">        <span class="keyword">if</span> (a[i] &lt;= k)</span><br><span class="line">        &#123;</span><br><span class="line">            s<span class="number">1.</span><span class="built_in">insert</span>(a[i]);</span><br><span class="line">            s.<span class="built_in">insert</span>(a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;b[i]);</span><br><span class="line">        <span class="keyword">if</span> (b[i] &lt;= k)</span><br><span class="line">        &#123;</span><br><span class="line">            s<span class="number">2.</span><span class="built_in">insert</span>(b[i]);</span><br><span class="line">            s.<span class="built_in">insert</span>(b[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (s.<span class="built_in">size</span>() &lt; k)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> cnt1 = <span class="number">0</span>, cnt2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!s<span class="number">1.</span><span class="built_in">count</span>(i) &amp;&amp; s<span class="number">2.</span><span class="built_in">count</span>(i))</span><br><span class="line">            &#123;</span><br><span class="line">                cnt1++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s<span class="number">1.</span><span class="built_in">count</span>(i) &amp;&amp; !s<span class="number">2.</span><span class="built_in">count</span>(i))</span><br><span class="line">            &#123;</span><br><span class="line">                cnt2++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cnt1 &gt; k / <span class="number">2</span> || cnt2 &gt; k / <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t = <span class="number">1</span>;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="d"><a class="markdownIt-Anchor" href="#d"></a> D</h1>
<p>这道题目是一个很简单的模拟题目，我们只需要找到下一个不相等的数字就可以了，如果没有就输出-1 -1</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">&#x27;0&#x27;</span> || ch &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            f = <span class="number">-1</span>;</span><br><span class="line">        ch = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x = x * <span class="number">10</span> + ch - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        ch = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    n = <span class="built_in">read</span>();</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>)</span>, <span class="title">next_not</span><span class="params">(n + <span class="number">1</span>, <span class="number">-1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i] = <span class="built_in">read</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] == a[i + <span class="number">1</span>])</span><br><span class="line">            next_not[i] = next_not[i + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            next_not[i] = i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> q;</span><br><span class="line">    q = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">while</span> (q--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> l, r;</span><br><span class="line">        l = <span class="built_in">read</span>();</span><br><span class="line">        r = <span class="built_in">read</span>();</span><br><span class="line">        <span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (next_not[l] != <span class="number">-1</span> &amp;&amp; next_not[l] &lt;= r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">write</span>(l);</span><br><span class="line">            <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">            <span class="built_in">write</span>(next_not[l]);</span><br><span class="line">            <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">write</span>(<span class="number">-1</span>);</span><br><span class="line">            <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">            <span class="built_in">write</span>(<span class="number">-1</span>);</span><br><span class="line">            <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t = <span class="number">1</span>;</span><br><span class="line">    t = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="e"><a class="markdownIt-Anchor" href="#e"></a> E</h1>
<p>构造题，观察样例可以看到规律</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, k;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="type">int</span> m = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt;= n; j += k)</span><br><span class="line">            &#123;</span><br><span class="line">                a[j] = m++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = n - (n - i) % k; j &gt;= <span class="number">1</span>; j -= k)</span><br><span class="line">            &#123;</span><br><span class="line">                a[j] = m++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>二分</title>
    <url>/2024/02/25/%E4%BA%8C%E5%88%86/</url>
    <content><![CDATA[<h1 id="二分"><a class="markdownIt-Anchor" href="#二分"></a> 二分</h1>
<p>二分是什么？
现在你有一个已经排列完成的数组，我现在想让你找到一个指定的x，找不到就返回-1，找到就返回下标。</p>
<p>有的同学是stl糕手,直接给我来一个find函数，那么就是以下的一个代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">auto</span> it = <span class="built_in">find</span>(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>(),x);</span><br><span class="line">    <span class="keyword">if</span>(it == a.<span class="built_in">end</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; it - a.<span class="built_in">begin</span>() &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个代码的复杂度是O(n)的。而且我们的数组是排好序的，其实只要折半查找就可以了</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">5</span>;</span><br><span class="line">    <span class="type">int</span> l = <span class="number">0</span>, r = a.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(a[mid] &gt;= x)</span><br><span class="line">        &#123;</span><br><span class="line">            r = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(a[l] == x)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; l &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上只是个很简单的例子。
二分另一个运用就是二分答案
因为我们可以知道答案反正就在这一个区间里面，我们又很容易去判断这个答案是不是正确的。
我们可以通过二分来解决问题。
洛谷p1873
这道题我们只需要二分1-1e9 然后判断此时树砍了多少就可以判断是否符合条件了
这就是最基础的二分答案的应用
还有一种就是找最大值的最小化，具体的可以去看oi-wiki上的相关讲解</p>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>时间复杂度</title>
    <url>/2024/02/29/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</url>
    <content><![CDATA[<h1 id="熟悉时间复杂度的概念"><a class="markdownIt-Anchor" href="#熟悉时间复杂度的概念"></a> 熟悉时间复杂度的概念</h1>
<h2 id="hanoi问题"><a class="markdownIt-Anchor" href="#hanoi问题"></a> hanoi问题</h2>
<p>hanoi问题是一个经典的递归问题，通常的来说递归问题的时间复杂度都会非常大，所以要根据题目内容避免tle</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">move</span><span class="params">(<span class="type">int</span> n, <span class="type">char</span> a, <span class="type">char</span> b, <span class="type">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;move &quot;</span> &lt;&lt; n &lt;&lt; <span class="string">&quot; from &quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot; to &quot;</span> &lt;&lt; c &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">move</span>(n - <span class="number">1</span>, a, c, b);</span><br><span class="line">        <span class="comment">// cout &lt;&lt; &quot;move &quot; &lt;&lt; n &lt;&lt; &quot; from &quot; &lt;&lt; a &lt;&lt; &quot; to &quot; &lt;&lt; c &lt;&lt; endl;</span></span><br><span class="line">        <span class="built_in">move</span>(<span class="number">1</span>, a, b, c);</span><br><span class="line">        <span class="built_in">move</span>(n - <span class="number">1</span>, b, a, c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1.将n-1个盘子从A经过C移动到B</span></span><br><span class="line"><span class="comment">// 2.将第n个盘子从A移动到C</span></span><br><span class="line"><span class="comment">// 3.将n-1个盘子从B经过A移动到C</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n; <span class="comment">// 最左边的盘子有n个</span></span><br><span class="line">    <span class="built_in">move</span>(n, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 时间复杂度：$O(2^n)$</span></span><br><span class="line"><span class="comment">// 移动的次数 $2^n-1$</span></span><br><span class="line"><span class="comment">//input</span></span><br><span class="line"><span class="comment">//5</span></span><br><span class="line">output</span><br><span class="line"><span class="comment">/*move 1 from A to C</span></span><br><span class="line"><span class="comment">move 2 from A to B</span></span><br><span class="line"><span class="comment">move 1 from C to B</span></span><br><span class="line"><span class="comment">move 3 from A to C</span></span><br><span class="line"><span class="comment">move 1 from B to A</span></span><br><span class="line"><span class="comment">move 2 from B to C</span></span><br><span class="line"><span class="comment">move 1 from A to C</span></span><br><span class="line"><span class="comment">move 4 from A to B</span></span><br><span class="line"><span class="comment">move 1 from C to B</span></span><br><span class="line"><span class="comment">move 2 from C to A</span></span><br><span class="line"><span class="comment">move 1 from B to A</span></span><br><span class="line"><span class="comment">move 3 from C to B</span></span><br><span class="line"><span class="comment">move 1 from A to C</span></span><br><span class="line"><span class="comment">move 2 from A to B</span></span><br><span class="line"><span class="comment">move 1 from C to B</span></span><br><span class="line"><span class="comment">move 5 from A to C</span></span><br><span class="line"><span class="comment">move 1 from B to A</span></span><br><span class="line"><span class="comment">move 2 from B to C</span></span><br><span class="line"><span class="comment">move 1 from A to C</span></span><br><span class="line"><span class="comment">move 3 from B to A</span></span><br><span class="line"><span class="comment">move 1 from C to B</span></span><br><span class="line"><span class="comment">move 2 from C to A</span></span><br><span class="line"><span class="comment">move 1 from B to A</span></span><br><span class="line"><span class="comment">move 4 from B to C</span></span><br><span class="line"><span class="comment">move 1 from A to C</span></span><br><span class="line"><span class="comment">move 2 from A to B</span></span><br><span class="line"><span class="comment">move 1 from C to B</span></span><br><span class="line"><span class="comment">move 3 from A to C</span></span><br><span class="line"><span class="comment">move 1 from B to A</span></span><br><span class="line"><span class="comment">move 2 from B to C</span></span><br><span class="line"><span class="comment">move 1 from A to C*/</span></span><br></pre></td></tr></table></figure>
<p>时间复杂度：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mn>2</mn><mi>n</mi></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(2^n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p>
<p>移动的次数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.747722em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>
hanoi问题主要是这样的，第一步把上面<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>个盘子通过通过<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi></mrow><annotation encoding="application/x-tex">C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>移动到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span>，然后将第<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>个盘子从<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">A</span></span></span></span>移动到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi></mrow><annotation encoding="application/x-tex">C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>，最后将<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>个盘子从<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span>移动到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi></mrow><annotation encoding="application/x-tex">C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>，这样就完成了整个移动的过程。</p>
<h2 id="直接插入排序"><a class="markdownIt-Anchor" href="#直接插入排序"></a> 直接插入排序</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">auto</span> insert_sort = [&amp;]()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> key = a[i];</span><br><span class="line">            <span class="type">int</span> j = i - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; a[j] &gt; key)</span><br><span class="line">            &#123;</span><br><span class="line">                a[j + <span class="number">1</span>] = a[j];</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            a[j + <span class="number">1</span>] = key;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 输出结果</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;排序后的结果为：&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= n; k++)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; a[k] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;一共移动了&quot;</span> &lt;&lt; cnt &lt;&lt; <span class="string">&quot;次&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">insert_sort</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>时间复杂度：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p>
<p>移动的次数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>次
为什么是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>次,因为每次插入的时候，前面必然可以找到一个位置来安放这一个数，所以最多移动n-1次，但是时间复杂度是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，因为最坏情况下，每次都要遍历到最前面所以是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>第二轮招新出题</title>
    <url>/2024/02/25/%E7%AC%AC%E4%BA%8C%E8%BD%AE%E6%8B%9B%E6%96%B0%E5%87%BA%E9%A2%98-1/</url>
    <content><![CDATA[<h2 id="2024届题解第二轮"><a class="markdownIt-Anchor" href="#2024届题解第二轮"></a> 2024届题解（第二轮）</h2>
<p>链接<a href="https://www.nowcoder.com/acm/contest/75692">https://www.nowcoder.com/acm/contest/75692</a></p>
<h3 id="e-祝你ac"><a class="markdownIt-Anchor" href="#e-祝你ac"></a> E 祝你ac</h3>
<p>签到，非常贴心</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    std::cin &gt;&gt; n;</span><br><span class="line">    std::string s;</span><br><span class="line">    std::cin &gt;&gt; s;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> t : &#123;<span class="string">&quot;Accept&quot;</span>&#125;)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (k &lt; <span class="number">6</span> &amp;&amp; s[i] == t[k])</span><br><span class="line">            &#123;</span><br><span class="line">                k++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (k == <span class="number">6</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (k == <span class="number">6</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;YES\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;NO\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="a-收红包"><a class="markdownIt-Anchor" href="#a-收红包"></a> A 收红包</h3>
<p>板子题，应该都能过，但是卡了cin的读入和endl，大家还是注意一下细节，卡这个只是出题人经历了很不美好的事情，以后写代码注意一下</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, q;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; q;</span><br><span class="line">    <span class="function">vector&lt;ll&gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>)</span>, <span class="title">s</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;a[i]);</span><br><span class="line">        s[i] = s[i - <span class="number">1</span>] + a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (q--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> l, r;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;l, &amp;r);</span><br><span class="line">        cout &lt;&lt; s[r] - s[l - <span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="b-买买买"><a class="markdownIt-Anchor" href="#b-买买买"></a> B 买买买</h3>
<p>简单前缀和</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, q;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; q;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());</span><br><span class="line">    <span class="function">vector&lt;ll&gt; <span class="title">s</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        s[i + <span class="number">1</span>] = s[i] + a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (q--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> k, x;</span><br><span class="line">        cin &gt;&gt; k &gt;&gt; x;</span><br><span class="line">        <span class="type">int</span> j = <span class="built_in">upper_bound</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), x) - a.<span class="built_in">begin</span>();</span><br><span class="line">        cout &lt;&lt; s[j] - s[<span class="built_in">max</span>(<span class="number">0</span>, j - k)] &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>至此，大家应该已经发现了这次选拔非常友好，60分钟应该3题做了</p>
<h3 id="c-backspace-和-delete-本题主要考察了字符串"><a class="markdownIt-Anchor" href="#c-backspace-和-delete-本题主要考察了字符串"></a> C backspace 和 delete 本题主要考察了字符串</h3>
<p>怕大家理解不过来给了大家很多例子，非常的贴心
这题有很多方法
其实最简单是deque，先读入string 然后找到pos(就是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi></mrow><annotation encoding="application/x-tex">I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span></span></span></span>的位置)，deque模拟，如果delete就右边头出，如果backspace就判断一手，左边有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo></mrow><annotation encoding="application/x-tex">(</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span></span></span></span>右边有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mclose">)</span></span></span></span>,就是左边尾出右边头出，最后操作结束输出就可以了</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, q;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    string s;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    cin &gt;&gt; q;</span><br><span class="line">    <span class="type">int</span> pos;</span><br><span class="line">    <span class="type">int</span> left, right;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == <span class="string">&#x27;I&#x27;</span>)</span><br><span class="line">            pos = i;</span><br><span class="line">    &#125;</span><br><span class="line">    left = pos - <span class="number">1</span>;</span><br><span class="line">    right = pos + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// backspace delete</span></span><br><span class="line">    <span class="keyword">while</span> (q--)</span><br><span class="line">    &#123;</span><br><span class="line">        string s1;</span><br><span class="line">        cin &gt;&gt; s1;</span><br><span class="line">        <span class="keyword">if</span> (s1 == <span class="string">&quot;backspace&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[left] == <span class="string">&#x27;(&#x27;</span> &amp;&amp; s[right] == <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                left--, right++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (left &gt;= <span class="number">0</span>)</span><br><span class="line">                left--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (right &lt; n)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= left; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; s[i];</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&#x27;I&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = right; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; s[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, q;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    string s;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    cin &gt;&gt; q;</span><br><span class="line">    <span class="type">int</span> pos;</span><br><span class="line">    <span class="type">int</span> pos = s.<span class="built_in">find</span>(<span class="string">&#x27;I&#x27;</span>);</span><br><span class="line">    <span class="keyword">while</span> (q--)</span><br><span class="line">    &#123;</span><br><span class="line">        string op;</span><br><span class="line">        cin &gt;&gt; op;</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="string">&quot;backspace&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (pos == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (pos &lt; s.<span class="built_in">length</span>() - <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (s[pos - <span class="number">1</span>] == <span class="string">&#x27;(&#x27;</span> <span class="keyword">and</span> s[pos + <span class="number">1</span>] == <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">                    s.<span class="built_in">erase</span>(pos + <span class="number">1</span>, <span class="number">1</span>), s.<span class="built_in">erase</span>(pos - <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    s.<span class="built_in">erase</span>(pos - <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                s.<span class="built_in">erase</span>(pos - <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">            --pos;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="string">&quot;delete&quot;</span> <span class="keyword">and</span> pos &lt; s.<span class="built_in">length</span>())</span><br><span class="line">            s.<span class="built_in">erase</span>(pos + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="d-二进制糕手"><a class="markdownIt-Anchor" href="#d-二进制糕手"></a> D 二进制糕手</h3>
<p>二进制糕手，综合运用题，离散化，并查集
我们注意到 s[i]表示数列前 i 项得和，则有：
若[a,b]区间内 1 的个数为偶数，则s[a-1]与s[b]的奇偶性相同；
若[a,b]区间内 1 的个数为奇数，则s[a-1]与s[b]的奇偶性不同。
如果奇偶矛盾那不妥妥的0
然后就是拓展域，离散化，然后并查集
1到n记录相同，n+1到2n记录不同</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> fa[maxn];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x, y, op;</span><br><span class="line">&#125; e[maxn];</span><br><span class="line"><span class="type">int</span> b[maxn];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x == fa[x] ? x : fa[x] = <span class="built_in">find</span>(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> fx = <span class="built_in">find</span>(x), fy = <span class="built_in">find</span>(y);</span><br><span class="line">    <span class="keyword">if</span> (fx != fy)</span><br><span class="line">        fa[fx] = fy;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; maxn; i++)</span><br><span class="line">        fa[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, q;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; q;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; e[i].x &gt;&gt; e[i].y;</span><br><span class="line">        string op;</span><br><span class="line">        cin &gt;&gt; op;</span><br><span class="line">        e[i].x--; <span class="comment">// 为了方便计算啊</span></span><br><span class="line">        <span class="keyword">if</span> (op == <span class="string">&quot;odd&quot;</span>)</span><br><span class="line">            e[i].op = <span class="number">1</span>; <span class="comment">// 奇数个</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            e[i].op = <span class="number">0</span>;</span><br><span class="line">        cnt++;</span><br><span class="line">        b[cnt] = e[i].x; <span class="comment">// 存进去</span></span><br><span class="line">        cnt++;</span><br><span class="line">        b[cnt] = e[i].y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(b + <span class="number">1</span>, b + <span class="number">1</span> + cnt);</span><br><span class="line">    cnt = <span class="built_in">unique</span>(b + <span class="number">1</span>, b + <span class="number">1</span> + cnt) - b - <span class="number">1</span>; <span class="comment">// unique去重</span></span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        e[i].x = <span class="built_in">lower_bound</span>(b + <span class="number">1</span>, b + <span class="number">1</span> + cnt, e[i].x) - b; <span class="comment">// 找到对应的位置</span></span><br><span class="line">        e[i].y = <span class="built_in">lower_bound</span>(b + <span class="number">1</span>, b + <span class="number">1</span> + cnt, e[i].y) - b;</span><br><span class="line">        <span class="comment">// op==0 是even，那么由我给出的结论 他们前缀的奇偶性是相同的</span></span><br><span class="line">        <span class="keyword">if</span> (e[i].op == <span class="number">0</span> &amp;&amp; <span class="built_in">find</span>(e[i].x) == <span class="built_in">find</span>(e[i].y + cnt)) <span class="comment">// 但是此时两个数的奇偶性不同</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; i - <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// op==1 是odd，那么由我给出的结论 他们前缀的奇偶性不同</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (e[i].op == <span class="number">1</span> &amp;&amp; <span class="built_in">find</span>(e[i].x) == <span class="built_in">find</span>(e[i].y)) <span class="comment">// 但是此时两个数的奇偶性相同</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; i - <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (e[i].op == <span class="number">0</span>) <span class="comment">// even 合并</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">merge</span>(e[i].x, e[i].y);</span><br><span class="line">                <span class="built_in">merge</span>(e[i].x + cnt, e[i].y + cnt);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="comment">// odd 合并</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">merge</span>(e[i].x, e[i].y + cnt);</span><br><span class="line">                <span class="built_in">merge</span>(e[i].x + cnt, e[i].y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; q &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果你看不懂这道题中的unique和lower_bound 可以稍微去学习一下，然后你就可以完成codeforces round 924 B 的题目
924B的题解会在本文最后面</p>
<h3 id="g-卤蛋数"><a class="markdownIt-Anchor" href="#g-卤蛋数"></a> G 卤蛋数</h3>
<p>前缀和，map，异或
可以任意组合形成传统意义上的回文数.
如果卤蛋数的长度是奇数会发生什么情况
1234567654321 除了7出现了奇数次，其余的数字都出现了偶数次
如果卤蛋数的长度是偶数会发生什么情况
123321 出现的数字都出现了偶数次
所以就是问你一个区间，最多只有一种数字出现的次数为奇数</p>
<p>然后呢就会写出一个暴力代码 就会t
我们并不需要关心每一个数字出现的次数，我们只需要关心每一个数字出现的次数的奇偶性</p>
<p>可以写一个map记录每个数字出现的次数，然后异或操作，然后就可以了</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line">string s;</span><br><span class="line">map&lt;vector&lt;<span class="type">int</span>&gt;, <span class="type">int</span>&gt; mp; <span class="comment">// 每一个数出现的次数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    string s;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">temp</span><span class="params">(<span class="number">10</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    mp[temp] = <span class="number">1</span>; <span class="comment">// 初始状态</span></span><br><span class="line">    ll sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        temp[s[i] - <span class="string">&#x27;0&#x27;</span>] ^= <span class="number">1</span>;       <span class="comment">// 异或操作奇数变偶数，偶数变奇数</span></span><br><span class="line">        sum += mp[temp];             <span class="comment">// 和之前的异或结果相同的个数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) <span class="comment">// 到目前这个数为止 </span></span><br><span class="line">        &#123;</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; tmp = temp;</span><br><span class="line">            tmp[j] ^= <span class="number">1</span>; <span class="comment">// 恰好有一位不同</span></span><br><span class="line">            sum += mp[tmp];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mp[temp]++; <span class="comment">// 更新出现次数</span></span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="f-组装电脑-叠券"><a class="markdownIt-Anchor" href="#f-组装电脑-叠券"></a> F 组装电脑 叠券</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">&#x27;0&#x27;</span> || ch &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            f = <span class="number">-1</span>;</span><br><span class="line">        ch = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x = x * <span class="number">10</span> + ch - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        ch = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n, m, k;</span><br><span class="line">    n = <span class="built_in">read</span>();</span><br><span class="line">    m = <span class="built_in">read</span>();</span><br><span class="line">    k = <span class="built_in">read</span>();</span><br><span class="line">    <span class="function">vector&lt;ll&gt; <span class="title">day</span><span class="params">(n + <span class="number">5</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> p, l, r;</span><br><span class="line">        p = <span class="built_in">read</span>();</span><br><span class="line">        l = <span class="built_in">read</span>();</span><br><span class="line">        r = <span class="built_in">read</span>();</span><br><span class="line">        day[l] += p;</span><br><span class="line">        day[r + <span class="number">1</span>] -= p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        day[i] += day[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> daa = <span class="number">0</span>;  <span class="comment">// 购入的好日子</span></span><br><span class="line">    <span class="type">int</span> less = <span class="number">0</span>; <span class="comment">// 减的钞票</span></span><br><span class="line">    ll ans = <span class="number">1e9</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (day[i] &gt; less)</span><br><span class="line">        &#123;</span><br><span class="line">            less = day[i];</span><br><span class="line">            ans = <span class="built_in">max</span>(<span class="number">0ll</span>, k - day[i]);</span><br><span class="line">            daa = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27; &#x27;</span></span><br><span class="line">         &lt;&lt; daa &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="h"><a class="markdownIt-Anchor" href="#h"></a> H</h3>
<p>傲娇小k 二分图</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> fa[<span class="number">2000005</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x == fa[x] ? x : fa[x] = <span class="built_in">find</span>(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> fx = <span class="built_in">find</span>(x);</span><br><span class="line">    <span class="type">int</span> fy = <span class="built_in">find</span>(y);</span><br><span class="line">    <span class="keyword">if</span> (fx != fy)</span><br><span class="line">    &#123;</span><br><span class="line">        fa[fx] = fy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">&#x27;0&#x27;</span> || ch &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            f = <span class="number">-1</span>;</span><br><span class="line">        ch = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x = x * <span class="number">10</span> + ch - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        ch = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    n = <span class="built_in">read</span>();</span><br><span class="line">    m = <span class="built_in">read</span>();</span><br><span class="line">    <span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span> * n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        fa[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x, y;</span><br><span class="line">        x = <span class="built_in">read</span>();</span><br><span class="line">        y = <span class="built_in">read</span>();</span><br><span class="line">        <span class="built_in">merge</span>(x, y + n);</span><br><span class="line">        <span class="built_in">merge</span>(y, x + n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">find</span>(i) == <span class="built_in">find</span>(i + n))</span><br><span class="line">        &#123;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    t = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x, y;</span><br><span class="line">        x = <span class="built_in">read</span>();</span><br><span class="line">        y = <span class="built_in">read</span>();</span><br><span class="line">        <span class="keyword">if</span> (!flag)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">merge</span>(x, y + n);</span><br><span class="line">        <span class="built_in">merge</span>(y, x + n);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">find</span>(x) == <span class="built_in">find</span>(y) || <span class="built_in">find</span>(x + n) == <span class="built_in">find</span>(y + n))</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="round924-b"><a class="markdownIt-Anchor" href="#round924-b"></a> round924 B</h3>
<h2 id="unique-函数"><a class="markdownIt-Anchor" href="#unique-函数"></a> unique 函数</h2>
<h2 id="924b"><a class="markdownIt-Anchor" href="#924b"></a> 924B</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> a[maxn];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">sort</span>(a, a + n);</span><br><span class="line">    <span class="type">int</span> m = <span class="built_in">unique</span>(a, a + n) - a;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> pos = <span class="built_in">lower_bound</span>(a, a + m, a[i] + n) - a;</span><br><span class="line">        cnt = <span class="built_in">max</span>(cnt, pos - i);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; cnt &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t = <span class="number">1</span>;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>unique 函数的用法</p>
<p>unique 函数是STL中的一个函数，它的作用是去除相邻的重复元素，返回去重后的数组的最后一个元素的下一个位置。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>&#125;;</span><br><span class="line"><span class="type">int</span> m = <span class="built_in">unique</span>(a, a + <span class="number">10</span>) - a;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>lower_bound 函数的用法</p>
<p>lower_bound 函数是STL中的一个函数，它的作用是在有序数组中找到第一个大于等于给定值的元素的位置。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;;</span><br><span class="line"><span class="type">int</span> pos = <span class="built_in">lower_bound</span>(a, a + <span class="number">10</span>, <span class="number">5</span>) - a; <span class="comment">// 在a数组中找到第一个大于等于5的元素的位置</span></span><br><span class="line">cout &lt;&lt; pos &lt;&lt; endl;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>贪心</title>
    <url>/2024/02/26/%E8%B4%AA%E5%BF%83/</url>
    <content><![CDATA[<h1 id="贪心"><a class="markdownIt-Anchor" href="#贪心"></a> 贪心</h1>
<p>什么是贪心？
日常生活中我们总是去贪心地做选择，就比如don旭买配置的时候总是会选择价格最低的。
贪心往往很容易想到，但是如何证明贪心是正确的呢？
比如don旭去配置电脑，他每一步都想选择最便宜的，这样在没有优惠券的情况下，don旭一直这样去选择，注定能买到最便宜的电脑，但是如果有优惠，这样往往就是不正确的，所以在使用贪心算法的时候应该要好好想想是否可以使用贪心算法。</p>
<p>举个例子</p>
<p>小卤蛋搬运水果，小卤蛋把<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>单位的水果和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>3</mn></mrow><annotation encoding="application/x-tex">3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span>单位的水果搬运到一起需要耗费<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mo>+</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">2+3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span>的体力，以此类推，一共有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span> 个水果，问小卤蛋最少需要使用多少体力才能将水果聚成一堆。
如果小卤蛋把<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>个水果排序，每次选择最少得两堆水果这样小卤蛋消耗的体力一定是最少的。
贪心算法在处理最优子结构的问题时往往是正确的。</p>
<p>大家也许已经了解过一些dp，那么dp和贪心有什么区别呢？
dp是保留先前状态的，是可以回退之前的结论然后更新现在的状态的，而贪心是一去不复返的。
来一道迷惑人的题目</p>
<h3 id="问题描述"><a class="markdownIt-Anchor" href="#问题描述"></a> 问题描述</h3>
<p>小蓝是一位有名的漆匠，他的朋友小桥有一个漆房，里面有一条长长的走廊，走廊两旁有许多相邻的房子，每间房子最初被涂上了一种颜色。小桥来找小蓝，想让他把整个走廊都涂成同一个颜色。小蓝告诉小桥，他每天只能涂一段长度为 k 的区间。对于每个区间，他可以选择将其中的房子重新涂上任何一种颜色，或者保持原来的颜色不变。小桥想知道小蓝至少要涂几天，才能让整个走廊变得美丽。</p>
<h4 id="输入描述"><a class="markdownIt-Anchor" href="#输入描述"></a> 输入描述</h4>
<p>第一行包含一个整数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mo stretchy="false">(</mo><mn>1</mn><mo>≤</mo><mn>100</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">t(1≤100)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">t</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mclose">)</span></span></span></span>,表示测试用例的数量。</p>
<p>每个测试用例的第一行包含两个整数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>≤</mo><mi>k</mi><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>10</mn><mtext>⁴</mtext><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(1\leq k \leq n \leq 10⁴)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83041em;vertical-align:-0.13597em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">⁴</span><span class="mclose">)</span></span></span></span>,
第二行包含<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>个整数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>a</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">a_1,a_2,…,a_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>≤</mo><msub><mi>a</mi><mi>i</mi></msub><mo>≤</mo><mn>60</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(1\leq a_i\leq 60)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7859700000000001em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">6</span><span class="mord">0</span><span class="mclose">)</span></span></span></span>,分别表示每个房子最初的颜色。
保证所有测试用例中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>的总和不超过 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>4</mn></msup></mrow><annotation encoding="application/x-tex">10^4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span>。</p>
<h4 id="输出描述"><a class="markdownIt-Anchor" href="#输出描述"></a> 输出描述</h4>
<p>对于每个测试用例，输出一个整数，表示小蓝需要涂漆的最少天数。</p>
<p>这道题可能想到是贪心去做，就是先读入一遍，然后去找最多出现的颜色，然后就进行一个贪心，这样子做正确吗？</p>
<p>如果我的颜色最多的都分散开来，另外有个颜色少的但是聚在一起的，这样能贪心吗？显然是不可以贪心的。然后看这道题的出处，暴力杯，注意到一共有60个颜色，需要考虑的不是很多，可以枚举每一种颜色，然后找到最小的输出就可以了。</p>
<p>值得大家注意的是贪心往往不会单独考察，往往会和其他内容一起考察，
更多的内容可以参考oiwiki，上面有些相关的例题，帮助你更好地去理解贪心。</p>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库绪论</title>
    <url>/2024/03/30/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BB%AA%E8%AE%BA/</url>
    <content><![CDATA[<p>本文纯纯是应付期末考试，不会对之后的应用有任何的帮助</p>
<h2 id="1概述"><a class="markdownIt-Anchor" href="#1概述"></a> 1.概述</h2>
<ol>
<li>
<p>数据 DATA
数据是数据库中存储的基本对象（文字，图形，图像，音频）</p>
</li>
<li>
<p>数据库 database DB
数据的集合，有集成性，共享性</p>
</li>
<li>
<p>数据库管理系统 DBMS
进行数据定义，数据操作，数据控制，数据管理的软件</p>
</li>
<li>
<p>数据库系统 DBS
数据库和数据库管理系统的集合</p>
</li>
</ol>
<h2 id="概念模型"><a class="markdownIt-Anchor" href="#概念模型"></a> 概念模型</h2>
<p>实体，属性，码，域，实体型，实体集</p>
<ol>
<li>
<p>实体
客观的人</p>
</li>
<li>
<p>属性
实体的特征</p>
</li>
<li>
<p>码
唯一标识实体的属性</p>
</li>
<li>
<p>域
属性的取值范围</p>
</li>
<li>
<p>实体型
具有相同属性的实体集</p>
</li>
<li>
<p>实体集
同一类实体的集合</p>
</li>
</ol>
<p>联系</p>
<ol>
<li>一对一</li>
<li>一对多</li>
<li>多对多</li>
</ol>
<h2 id="e-r图"><a class="markdownIt-Anchor" href="#e-r图"></a> E-R图</h2>
<p>先画实体，再画联系</p>
<p>一些经典的例子
目前主流的是关系数据库系统，淘汰了层次数据库和网状数据库
数据结构是刻画一个数据模型性质最重要的方面
概念模型属于信息世界的模型，是现实世界到机器世界的一个中间层次</p>
]]></content>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>图论——树</title>
    <url>/2024/04/22/%E5%9B%BE%E8%AE%BA%E2%80%94%E2%80%94%E6%A0%91/</url>
    <content><![CDATA[<h2 id="基础概念"><a class="markdownIt-Anchor" href="#基础概念"></a> 基础概念</h2>
<p>一个具有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>个结点，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>条边的连通无环图称为树。
无向无环的连通图叫做树
任意两个结点之间有且仅有一条简单路径的无向图叫树
（离散数学其实会考一道选择题）
祖先：从根到该结点的路径上的所有结点<br>
父亲结点：与该结点相邻的上面的结点<br>
子节点：父结点下面的结点<br>
叶子结点：没有子节点的结点<br></p>
<p><img src="https://oi-wiki.org/graph/images/tree-definition.svg" alt="" /></p>
<h2 id="如何存树"><a class="markdownIt-Anchor" href="#如何存树"></a> 如何存树</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vetcor&lt;<span class="type">int</span>&gt; tree[N];</span><br></pre></td></tr></table></figure>
<p>直接存储是一个方法</p>
<h2 id="特殊的树二叉树"><a class="markdownIt-Anchor" href="#特殊的树二叉树"></a> 特殊的树——二叉树</h2>
<p>二叉树是每个结点最多有两个子树的树结构。通常子树被称作“左子树”（left subtree）和“右子树”（right subtree）。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    node *left;</span><br><span class="line">    node *right;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node1</span>&#123;</span><br><span class="line">    <span class="type">int</span> left;</span><br><span class="line">    <span class="type">int</span> right;</span><br><span class="line">&#125;e[N];</span><br></pre></td></tr></table></figure>
<p>前序遍历</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">preOrder</span><span class="params">(node *root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    cout &lt;&lt; root-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="built_in">preOrder</span>(root-&gt;left);</span><br><span class="line">    <span class="built_in">preOrder</span>(root-&gt;right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>中序遍历</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">inOrder</span><span class="params">(node *root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">inOrder</span>(root-&gt;left);</span><br><span class="line">    cout &lt;&lt; root-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="built_in">inOrder</span>(root-&gt;right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>后序遍历</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">postOrder</span><span class="params">(node *root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">postOrder</span>(root-&gt;left);</span><br><span class="line">    <span class="built_in">postOrder</span>(root-&gt;right);</span><br><span class="line">    cout &lt;&lt; root-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>算法分析</title>
    <url>/2024/06/12/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="复习报告"><a class="markdownIt-Anchor" href="#复习报告"></a> 复习报告</h1>
<h2 id="8-puzzle"><a class="markdownIt-Anchor" href="#8-puzzle"></a> 8-puzzle</h2>
<p>洛谷上有相关的链接
洛谷p1379
注意题修改过，输出了路径，并且本题的目标函数是123456780</p>
<p><a href="https://www.luogu.com.cn/record/161914795">通过评测</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; dir = &#123;&#123;<span class="number">-1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    string target = <span class="string">&quot;123456780&quot;</span>;</span><br><span class="line">    queue&lt;pair&lt;string, <span class="type">int</span>&gt;&gt; q;<span class="comment">//string记录状态，int记录步数</span></span><br><span class="line">    map&lt;string, string&gt; pre; <span class="comment">//记录前面的状态</span></span><br><span class="line">    stack&lt;string&gt; ans;</span><br><span class="line">    <span class="keyword">if</span> (s == target)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="number">0</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    unordered_set&lt;string&gt; st;</span><br><span class="line">    q.<span class="built_in">push</span>(&#123;s, <span class="number">0</span>&#125;);</span><br><span class="line">    st.<span class="built_in">insert</span>(&#123;s&#125;);</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> [now, step] = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> pos = now.<span class="built_in">find</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">        <span class="comment">// cout &lt;&lt; pos &lt;&lt; endl;</span></span><br><span class="line">        <span class="type">int</span> xx = pos / <span class="number">3</span>, yy = pos % <span class="number">3</span>;</span><br><span class="line">        <span class="comment">// cout &lt;&lt; xx &lt;&lt; &#x27; &#x27; &lt;&lt; yy &lt;&lt; endl;</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> nx = xx + dir[i][<span class="number">0</span>], ny = yy + dir[i][<span class="number">1</span>];</span><br><span class="line">            <span class="comment">// cout &lt;&lt; nx &lt;&lt; &#x27; &#x27; &lt;&lt; ny &lt;&lt; endl;</span></span><br><span class="line">            <span class="keyword">if</span> (nx &gt;= <span class="number">0</span> &amp;&amp; nx &lt; <span class="number">3</span> &amp;&amp; ny &gt;= <span class="number">0</span> &amp;&amp; ny &lt; <span class="number">3</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                string tmp = now;</span><br><span class="line">                <span class="built_in">swap</span>(tmp[nx * <span class="number">3</span> + ny], tmp[xx * <span class="number">3</span> + yy]);</span><br><span class="line">                pre[tmp] = now;</span><br><span class="line">                <span class="comment">// cout &lt;&lt; now &lt;&lt; &#x27; &#x27; &lt;&lt; tmp &lt;&lt; endl;</span></span><br><span class="line">                <span class="keyword">if</span> (tmp == target)</span><br><span class="line">                &#123;</span><br><span class="line">                    cout &lt;&lt; step + <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">                    string pree = tmp;</span><br><span class="line">                    ans.<span class="built_in">push</span>(pree);</span><br><span class="line">                    <span class="comment">// cout &lt;&lt; pree &lt;&lt; &#x27; &#x27; &lt;&lt; pre[pree] &lt;&lt; endl;</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; step; i++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        ans.<span class="built_in">push</span>(pre[pree]);</span><br><span class="line">                        pree = pre[pree];</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// ans.push(s);</span></span><br><span class="line">                    <span class="keyword">while</span> (!ans.<span class="built_in">empty</span>())</span><br><span class="line">                    &#123;</span><br><span class="line">                        string noww = ans.<span class="built_in">top</span>();</span><br><span class="line">                        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">                            &#123;</span><br><span class="line">                                cout &lt;&lt; noww[i * <span class="number">3</span> + j] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            cout &lt;&lt; endl;</span><br><span class="line">                        &#125;</span><br><span class="line">                        cout &lt;&lt; endl;</span><br><span class="line">                        ans.<span class="built_in">pop</span>();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (st.<span class="built_in">count</span>(tmp) == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// cout &lt;&lt; tmp &lt;&lt; endl;</span></span><br><span class="line">                    st.<span class="built_in">insert</span>(tmp);</span><br><span class="line">                    q.<span class="built_in">push</span>(&#123;tmp, step + <span class="number">1</span>&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h2 id="矩阵链乘法"><a class="markdownIt-Anchor" href="#矩阵链乘法"></a> 矩阵链乘法</h2>
<p>注：此解不可以通过洛谷P1753
会全部TLE但是我不会优化了</p>
<p>评测TLE 链接<a href="https://www.luogu.com.cn/record/161918925">TLE的链接</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function">string <span class="title">mat</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;A&quot;</span> + <span class="built_in">to_string</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">int</span> nn;</span><br><span class="line">    cin &gt;&gt; nn;</span><br><span class="line">    nn += <span class="number">1</span>;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">    <span class="keyword">while</span> (nn--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; x;</span><br><span class="line">        v.<span class="built_in">push_back</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> n = v.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    cout &lt;&lt; n &lt;&lt; endl;</span><br><span class="line">    vector&lt;vector&lt;pair&lt;<span class="type">int</span>, string&gt;&gt;&gt; <span class="built_in">dp</span>(n + <span class="number">1</span>, vector&lt;pair&lt;<span class="type">int</span>, string&gt;&gt;(n + <span class="number">1</span>, &#123;inf, <span class="string">&quot;&quot;</span>&#125;));</span><br><span class="line">    function&lt;pair&lt;<span class="type">int</span>, string&gt;(<span class="type">int</span>, <span class="type">int</span>)&gt; solve = [&amp;](<span class="type">int</span> l, <span class="type">int</span> r) -&gt; pair&lt;<span class="type">int</span>, string&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (l + <span class="number">1</span> == r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="number">0</span>, <span class="built_in">mat</span>(r)&#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (dp[l][r].first != inf)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> dp[l][r];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> m = l + <span class="number">1</span>; m + <span class="number">1</span> &lt;= r; m++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">auto</span> res1 = <span class="built_in">solve</span>(l, m);</span><br><span class="line">            <span class="keyword">auto</span> a = res<span class="number">1.f</span>irst;</span><br><span class="line">            <span class="keyword">auto</span> s1 = res<span class="number">1.</span>second;</span><br><span class="line">            <span class="keyword">auto</span> res2 = <span class="built_in">solve</span>(m, r);</span><br><span class="line">            <span class="keyword">auto</span> b = res<span class="number">2.f</span>irst;</span><br><span class="line">            <span class="keyword">auto</span> s2 = res<span class="number">2.</span>second;</span><br><span class="line">            <span class="type">int</span> c = a + b + v[l] * v[m] * v[r];</span><br><span class="line">            <span class="keyword">if</span> (dp[l][r].first &gt; c)</span><br><span class="line">            &#123;</span><br><span class="line">                dp[l][r].first = c;</span><br><span class="line">                dp[l][r].second = <span class="string">&quot;(&quot;</span> + s1 + s2 + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[l][r];</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> res = <span class="built_in">solve</span>(<span class="number">0</span>, n);</span><br><span class="line">    <span class="keyword">auto</span> ans = res.first;</span><br><span class="line">    <span class="keyword">auto</span> str = res.second;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="comment">// cout &lt;&lt; str &lt;&lt; &quot;\n&quot;;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// cerr &lt;&lt; cnt;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--more-->
<h2 id="最短操作距离"><a class="markdownIt-Anchor" href="#最短操作距离"></a> 最短操作距离</h2>
<p>很简单的dp</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s1, s2;</span><br><span class="line">    cin &gt;&gt; s1 &gt;&gt; s2;</span><br><span class="line">    <span class="type">int</span> n = s<span class="number">1.</span><span class="built_in">size</span>(), m = s<span class="number">2.</span><span class="built_in">size</span>();</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(m + <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        dp[i][<span class="number">0</span>] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= m; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        dp[<span class="number">0</span>][j] = j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (s1[i - <span class="number">1</span>] == s2[j - <span class="number">1</span>])</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                dp[i][j] = <span class="built_in">min</span>(dp[i - <span class="number">1</span>][j], <span class="built_in">min</span>(dp[i - <span class="number">1</span>][j - <span class="number">1</span>], dp[i][j - <span class="number">1</span>])) + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; dp[n][m] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="区间调度"><a class="markdownIt-Anchor" href="#区间调度"></a> 区间调度</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 贪心算法</span></span><br><span class="line"><span class="comment">// 按照结束时间排序，每次选择结束时间最早的，且和前一个不重叠的</span></span><br><span class="line"><span class="comment">// 时间复杂度O(nlogn)</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> start;</span><br><span class="line">    <span class="type">int</span> end;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node aa, node bb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (aa.end == bb.end)</span><br><span class="line">        <span class="keyword">return</span> aa.start &lt; bb.start;</span><br><span class="line">    <span class="keyword">return</span> aa.end &lt; bb.end;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;node&gt; <span class="title">events</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; events[i].start &gt;&gt; events[i].end;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> max_num = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">sort</span>(events.<span class="built_in">begin</span>(), events.<span class="built_in">end</span>(), cmp);</span><br><span class="line">    <span class="type">int</span> end_time = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (events[i].start &gt;= end_time)</span><br><span class="line">        &#123;</span><br><span class="line">            max_num++;</span><br><span class="line">            end_time = events[i].end;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; max_num &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="逆序对"><a class="markdownIt-Anchor" href="#逆序对"></a> 逆序对</h2>
<p>可以使用归并排序来解决
<a href="https://www.luogu.com.cn/record/161911142">通过链接</a>
<a href="https://leetcode.cn/submissions/detail/537595714/">leetcode</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">nums</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">tmp</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    std::function&lt;<span class="type">int</span>(vector&lt;<span class="type">int</span>&gt; &amp;, vector&lt;<span class="type">int</span>&gt; &amp;, <span class="type">int</span>, <span class="type">int</span>)&gt; merge_sort_count = [&amp;](vector&lt;<span class="type">int</span>&gt; &amp;nums, vector&lt;<span class="type">int</span>&gt; &amp;tmp, <span class="type">int</span> l, <span class="type">int</span> r) -&gt; <span class="type">int</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= r)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> mid = l + (r - l) / <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> res = <span class="built_in">merge_sort_count</span>(nums, tmp, l, mid) + <span class="built_in">merge_sort_count</span>(nums, tmp, mid + <span class="number">1</span>, r);</span><br><span class="line">        <span class="type">int</span> i = l, j = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k = l; k &lt;= r; k++)</span><br><span class="line">        &#123;</span><br><span class="line">            tmp[k] = nums[k];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k = l; k &lt;= r; k++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == mid + <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                nums[k] = tmp[j++];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (j == r + <span class="number">1</span> || tmp[i] &lt;= tmp[j])</span><br><span class="line">            &#123;</span><br><span class="line">                nums[k] = tmp[i++];</span><br><span class="line">                res += j - (mid + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                nums[k] = tmp[j++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">merge_sort_count</span>(nums, tmp, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>树状数组解法</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">5e5</span><span class="number">+5</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> tree[maxn];</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;(-x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="type">int</span> rk[maxn];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">&#125;a[maxn];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span> <span class="params">(node a,node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.val==b.val)</span><br><span class="line">    <span class="keyword">return</span> a.num&lt;b.num;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> a.val&lt;b.val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(x&lt;=n)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[x]+=val;</span><br><span class="line">        x+=<span class="built_in">lowbit</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ans+=tree[x];</span><br><span class="line">        x-=<span class="built_in">lowbit</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i].val);</span><br><span class="line">        a[i].num=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(a<span class="number">+1</span>,a+n<span class="number">+1</span>,cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        rk[a[i].num]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=n;i&gt;<span class="number">0</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">update</span>(rk[i],<span class="number">1</span>);</span><br><span class="line">        ans+=<span class="built_in">sum</span>(rk[i]<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>希望明天上机测试好运</p>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>算法复习分析</title>
    <url>/2024/06/13/%E7%AE%97%E6%B3%95%E5%A4%8D%E4%B9%A0%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>以下是今天的考试过程和结题报告
好消息：全复习到了
坏消息：考试的时候没看懂读入</p>
<h2 id="t1整数数组的重复项"><a class="markdownIt-Anchor" href="#t1整数数组的重复项"></a> T1整数数组的重复项</h2>
<p>大概的题意是将一个数组中的重复元素删去，给你的是一个有序的数组所以不需要考虑断断续续的情况
问题是题目给的输入是'[1,2,2]'
感觉不是很难处理
写了一发</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    <span class="built_in">getline</span>(cin, s);</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; nums;</span><br><span class="line">    <span class="type">int</span> len = s.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == <span class="string">&#x27;[&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (s[i] == <span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            nums.<span class="built_in">push_back</span>(x);</span><br><span class="line">            x = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (s[i] == <span class="string">&#x27;]&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            nums.<span class="built_in">push_back</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            x = x * <span class="number">10</span> + s[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// unique来删掉连续重复的元素，只保留</span></span><br><span class="line">    <span class="comment">// unique返回的是最后一个不重复元素的下一个位置</span></span><br><span class="line">    <span class="comment">// 这里一开始我忘记了unique的用法，然后就不会写了</span></span><br><span class="line">    <span class="keyword">auto</span> pos = <span class="built_in">unique</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">    cout &lt;&lt; pos - nums.<span class="built_in">begin</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; pos - nums.<span class="built_in">begin</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; nums[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后这道题到这里就卡住了，后来老师来改了输入，改成了</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">1 </span><span class="number">1</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>考试时候的代码
所考的知识点双指针</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; nums;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; x)</span><br><span class="line">    &#123;</span><br><span class="line">        nums.<span class="built_in">push_back</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (j &lt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] != nums[j])<span class="comment">//如果不相等，就把j的值赋给i，然后j++</span></span><br><span class="line">        &#123;</span><br><span class="line">            i++;</span><br><span class="line">            nums[i] = nums[j];<span class="comment">//这里是把j的值赋给i</span></span><br><span class="line">        &#125;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> all = i + <span class="number">1</span>;</span><br><span class="line">    cout &lt;&lt; all &lt;&lt; <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; all; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; nums[k] &lt;&lt; <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h2 id="t2动态规划算法解矩阵连乘"><a class="markdownIt-Anchor" href="#t2动态规划算法解矩阵连乘"></a> T2动态规划算法解矩阵连乘</h2>
<p>这题是矩阵链乘法，并且只需要输出最少的乘法次数，这道题的输入样例很规范，然后很快就能写出下面的代码。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; nums;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; x)</span><br><span class="line">    &#123;</span><br><span class="line">        nums.<span class="built_in">push_back</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> n = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">mp</span>(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n + <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> l = <span class="number">2</span>; l &lt;= n; l++) <span class="comment">// 遍历矩阵链的长度</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n - l + <span class="number">1</span>; i++) <span class="comment">// 枚举起点</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> j = i + l - <span class="number">1</span>; <span class="comment">// 这是终点</span></span><br><span class="line">            mp[i][j] = inf;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = i; k &lt; j; k++) <span class="comment">// 枚举分割点</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> res = mp[i][k] + mp[k + <span class="number">1</span>][j] + nums[i - <span class="number">1</span>] * nums[k] * nums[j]; <span class="comment">// 算得当前的最小值</span></span><br><span class="line">                <span class="keyword">if</span> (res &lt; mp[i][j])</span><br><span class="line">                &#123;</span><br><span class="line">                    mp[i][j] = res;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; mp[<span class="number">1</span>][n] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用了区间dp，下面是另外一种写法dp+递归</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> i64 = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">mat</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;A&quot;</span> + <span class="built_in">to_string</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">int</span> nn;</span><br><span class="line">    cin &gt;&gt; nn;</span><br><span class="line">    nn += <span class="number">1</span>;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">    <span class="keyword">while</span> (nn--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; x;</span><br><span class="line">        v.<span class="built_in">push_back</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> n = v.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    cout &lt;&lt; n &lt;&lt; endl;</span><br><span class="line">    vector&lt;vector&lt;pair&lt;<span class="type">int</span>, string&gt;&gt;&gt; <span class="built_in">dp</span>(n + <span class="number">1</span>, vector&lt;pair&lt;<span class="type">int</span>, string&gt;&gt;(n + <span class="number">1</span>, &#123;inf, <span class="string">&quot;&quot;</span>&#125;));</span><br><span class="line">    function&lt;pair&lt;<span class="type">int</span>, string&gt;(<span class="type">int</span>, <span class="type">int</span>)&gt; solve = [&amp;](<span class="type">int</span> l, <span class="type">int</span> r) -&gt; pair&lt;<span class="type">int</span>, string&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (l + <span class="number">1</span> == r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="number">0</span>, <span class="built_in">mat</span>(r)&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dp[l][r].first != inf)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> dp[l][r];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> m = l + <span class="number">1</span>; m + <span class="number">1</span> &lt;= r; m++) <span class="comment">// 枚举分割点</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">auto</span> res1 = <span class="built_in">solve</span>(l, m);<span class="comment">//递归求解左边</span></span><br><span class="line">            <span class="keyword">auto</span> a = res<span class="number">1.f</span>irst;</span><br><span class="line">            <span class="keyword">auto</span> s1 = res<span class="number">1.</span>second;</span><br><span class="line">            <span class="keyword">auto</span> res2 = <span class="built_in">solve</span>(m, r);<span class="comment">//递归求解右边</span></span><br><span class="line">            <span class="keyword">auto</span> b = res<span class="number">2.f</span>irst;</span><br><span class="line">            <span class="keyword">auto</span> s2 = res<span class="number">2.</span>second;</span><br><span class="line">            <span class="type">int</span> c = a + b + v[l] * v[m] * v[r];</span><br><span class="line">            <span class="keyword">if</span> (dp[l][r].first &gt; c)</span><br><span class="line">            &#123;</span><br><span class="line">                dp[l][r].first = c;</span><br><span class="line">                dp[l][r].second = <span class="string">&quot;(&quot;</span> + s1 + s2 + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[l][r];</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> res = <span class="built_in">solve</span>(<span class="number">0</span>, n);</span><br><span class="line">    <span class="keyword">auto</span> ans = res.first;</span><br><span class="line">    <span class="keyword">auto</span> str = res.second;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里使用了一个 <em>pair&lt;int ,string&gt;</em> 来存储最小值和最小值的表达式，然后使用递归的方式来求解，这里的递归是从最小的问题开始求解，然后逐渐扩大问题的规模，最后求解出整个问题的解。
其实可以发现两个解的方法是一样的。</p>
<h2 id="t3求编辑距离"><a class="markdownIt-Anchor" href="#t3求编辑距离"></a> T3求编辑距离</h2>
<p>简单的dp求最短编辑距离</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s1, s2;</span><br><span class="line">    cin &gt;&gt; s1 &gt;&gt; s2;</span><br><span class="line">    <span class="type">int</span> n = s<span class="number">1.</span><span class="built_in">size</span>(), m = s<span class="number">2.</span><span class="built_in">size</span>();                  <span class="comment">// n是s1的长度，m是s2的长度</span></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(m + <span class="number">1</span>)); <span class="comment">// dp[i][j]表示s1的前i个字符变成s2的前j个字符需要的最小操作次数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        dp[i][<span class="number">0</span>] = i; <span class="comment">// s1的前i个字符变成s2的前0个字符需要i次操作</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= m; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        dp[<span class="number">0</span>][j] = j; <span class="comment">// s1的前0个字符变成s2的前j个字符需要j次操作</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (s1[i - <span class="number">1</span>] == s2[j - <span class="number">1</span>])      <span class="comment">// s1的第i-1个字符和s2的第j-1个字符相等</span></span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>]; <span class="comment">// 肯定是不用操作的</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                dp[i][j] = <span class="built_in">min</span>(dp[i - <span class="number">1</span>][j], <span class="built_in">min</span>(dp[i - <span class="number">1</span>][j - <span class="number">1</span>], dp[i][j - <span class="number">1</span>])) + <span class="number">1</span>; <span class="comment">// 寻找最小的操作次数，包括删除，插入，替换</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; dp[n][m] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="t4-逆序对"><a class="markdownIt-Anchor" href="#t4-逆序对"></a> T4 逆序对</h2>
<p>最悲伤的题目，我修改了无数次的bug发现输入时需要考虑逗号的，但是测试样例中有一个测试样例输出的答案时0然后就改方法一直以为时自己写的有问题，先是写了归并排序的方法，然后写了暴力，最后发现写的树状数组都过不了这道题，知道完成考试才发现这道题输入的是这样的形式</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span></span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    <span class="built_in">getline</span>(cin, s);</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; nums;</span><br><span class="line">    <span class="type">int</span> len = s.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == <span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            nums.<span class="built_in">push_back</span>(x);</span><br><span class="line">            x = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            x = x * <span class="number">10</span> + s[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    nums.<span class="built_in">push_back</span>(x);</span><br><span class="line">    <span class="comment">//以上是考试时候忽略的输入部分内容</span></span><br><span class="line">    <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">tmp</span><span class="params">(n)</span></span>;</span><br><span class="line">    function&lt;<span class="type">int</span>(vector&lt;<span class="type">int</span>&gt; &amp;, vector&lt;<span class="type">int</span>&gt; &amp;, <span class="type">int</span>, <span class="type">int</span>)&gt; mergesort = [&amp;](vector&lt;<span class="type">int</span>&gt; &amp;nums, vector&lt;<span class="type">int</span>&gt; &amp;tmp, <span class="type">int</span> l, <span class="type">int</span> r) -&gt; <span class="type">int</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= r)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> res = <span class="built_in">mergesort</span>(nums, tmp, l, mid) + <span class="built_in">mergesort</span>(nums, tmp, mid + <span class="number">1</span>, r);<span class="comment">//将左右两部分分别排序</span></span><br><span class="line">        <span class="type">int</span> i = l, j = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt;= mid)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (j &lt;= r &amp;&amp; nums[i] &gt; <span class="number">2</span> * nums[j])  <span class="comment">//计算逆序对</span></span><br><span class="line">            &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            res += j - (mid + <span class="number">1</span>);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//经典的归并排序部分操作</span></span><br><span class="line">        i = l, j = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> k = l;</span><br><span class="line">        <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &lt;= nums[j])</span><br><span class="line">            &#123;</span><br><span class="line">                tmp[k++] = nums[i++];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                tmp[k++] = nums[j++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (i &lt;= mid)</span><br><span class="line">        &#123;</span><br><span class="line">            tmp[k++] = nums[i++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (j &lt;= r)</span><br><span class="line">        &#123;</span><br><span class="line">            tmp[k++] = nums[j++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k = l; k &lt;= r; k++)</span><br><span class="line">        &#123;</span><br><span class="line">            nums[k] = tmp[k];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">mergesort</span>(nums, tmp, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>据说这道题暴力O(n^2)的方法都能过</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    <span class="built_in">getline</span>(cin, s);</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; nums;</span><br><span class="line">    <span class="type">int</span> len = s.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == <span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            nums.<span class="built_in">push_back</span>(x);</span><br><span class="line">            x = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            x = x * <span class="number">10</span> + s[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    nums.<span class="built_in">push_back</span>(x);</span><br><span class="line">    <span class="comment">//以上是考试时候忽略的输入部分内容</span></span><br><span class="line">    <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; <span class="number">2</span> * nums[j])</span><br><span class="line">            &#123;</span><br><span class="line">                res++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; res;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="证明题"><a class="markdownIt-Anchor" href="#证明题"></a> 证明题</h2>
<p>一个硬币系统中共有1、5、10、25、100共5种硬币，用贪婪法能否得到最优解？为什么？（提示：不能得到最优解，请举出反列，能得到最优解，请给出证明）</p>
<p><strong>基础情况</strong>:</p>
<ul>
<li>当 $N $ 小于5时，只能使用1分硬币，贪婪法得到的是 $ N $ 个1分硬币，这显然是最优解。</li>
<li>当 $ N = 5 $ 时，使用一个5分硬币是最优解。</li>
<li>当 $ N = 10 $ 时，使用一个10分硬币是最优解。</li>
<li>当 $ N = 25 $ 时，使用一个25分硬币是最优解。</li>
<li>当 $ N = 100 $ 时，使用一个100分硬币是最优解。</li>
</ul>
<p><strong>归纳</strong></p>
<ul>
<li>考虑金额 $ N $：
<ul>
<li>如果 $ N \geq 100 $，我们使用一个100分硬币，然后求解 $ N - 100 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>。根据归纳假设，</mtext></mrow><annotation encoding="application/x-tex">。根据归纳假设，</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">。</span><span class="mord cjk_fallback">根</span><span class="mord cjk_fallback">据</span><span class="mord cjk_fallback">归</span><span class="mord cjk_fallback">纳</span><span class="mord cjk_fallback">假</span><span class="mord cjk_fallback">设</span><span class="mord cjk_fallback">，</span></span></span></span> N - 100 $ 的解是最优的，因此加上一个100分硬币也是最优的。</li>
<li>类似地，如果 $ 25 \leq N &lt; 100 $，我们使用一个25分硬币，然后求解 $ N - 25 $。</li>
<li>如果 $ 10 \leq N &lt; 25 $，我们使用一个10分硬币，然后求解 $ N - 10 $。</li>
<li>如果 $ 5 \leq N &lt; 10 $，我们使用一个5分硬币，然后求解 $ N - 5 $。</li>
<li>最后，如果 $ 1 \leq N &lt; 5 $，我们直接使用 $ N $ 个1分硬币。</li>
</ul>
</li>
</ul>
<p>所以必定是最优的</p>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>读入的个人理解</title>
    <url>/2024/06/14/%E8%AF%BB%E5%85%A5%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="如何读入"><a class="markdownIt-Anchor" href="#如何读入"></a> 如何读入</h1>
<p>一般来说，题目会有这样的输入格式以标准的codeforces为例</p>
<p><strong>Input</strong></p>
<p>The first line contains an integer <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathnormal">t</span></span></span></span> (<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>t</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>4</mn></msup></mrow><annotation encoding="application/x-tex">1 \leq t \leq 10^4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span>) – the number of test cases.</p>
<p>Each test case contains three integers <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi></mrow><annotation encoding="application/x-tex">l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span>, and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span> (<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo>≤</mo><mi>l</mi><mo>≤</mo><mi>r</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup></mrow><annotation encoding="application/x-tex">0 \leq l \leq r \leq 10^9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83041em;vertical-align:-0.13597em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>k</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup></mrow><annotation encoding="application/x-tex">1 \leq k \leq 10^9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83041em;vertical-align:-0.13597em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span></span></span></span>).</p>
<p>接下来会有一个输入的例子，如下</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">6</span></span><br><span class="line"><span class="symbol">0 </span><span class="number">1</span> <span class="number">4</span></span><br><span class="line"><span class="symbol">0 </span><span class="number">2</span> <span class="number">7</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="symbol">582 </span><span class="number">74663</span> <span class="number">3</span></span><br><span class="line"><span class="symbol">0 </span><span class="number">3</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>这种情况是很容易读入的，也是我最想看见的</p>
<p>读入的优化</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br></pre></td></tr></table></figure>
<p>这样的语句可以在读入大量数据的时候提高读入的速度</p>
<span id="more"></span>
<p>有的时候题目的读入不是很友好，比如2024天梯赛的蛇语</p>
<p>输入第一行给出一个正整数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(\leq 10^5)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，为蛇语词典中句子的个数。随后 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span> 行，每行用汉语拼音给出一句话。每句话由小写英文字母和空格组成，每个字的拼音由不超过 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>6</mn></mrow><annotation encoding="application/x-tex">6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">6</span></span></span></span> 个小写英文字母组成，两个字的拼音之间用空格分隔。题目保证每句话总长度不超过 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>50</mn></mrow><annotation encoding="application/x-tex">50</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span><span class="mord">0</span></span></span></span> 个字符，用回车结尾。注意：回车不算句中字符。
随后在一行中给出一个正整数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>3</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(\leq 10^3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，为查询次数。后面跟 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span> 行，每行用汉语拼音给出需要查询的一句话，格式同上。</p>
<p>输出格式：
对每一句查询，在一行中输出其对应的句子。如果句子不唯一，则按整句的字母序输出，句子间用 | 分隔。如果查不到，则将输入的句子原样输出。
注意：输出句子时，必须保持句中所有字符不变，包括空格。</p>
<p>输入样例：</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="number">8</span></span><br><span class="line">yong yuan de <span class="keyword">shen</span></span><br><span class="line"><span class="keyword"></span>yong yuan de <span class="keyword">she</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">jing </span>dong xin <span class="keyword">bai </span>huo</span><br><span class="line"><span class="keyword">she </span>yu wo ye hui <span class="keyword">shuo </span>yi <span class="keyword">dian </span><span class="keyword">dian</span></span><br><span class="line"><span class="keyword"></span>liang wei <span class="keyword">bu </span>yao chong dong</span><br><span class="line">yi  <span class="keyword">dian </span><span class="keyword">dian</span></span><br><span class="line"><span class="keyword"></span>ni hui <span class="keyword">shuo </span><span class="keyword">she </span>yu a</span><br><span class="line">yong yuan de <span class="keyword">sha</span></span><br><span class="line"><span class="keyword"></span><span class="number">7</span></span><br><span class="line"><span class="keyword">jiu </span><span class="keyword">dian </span>xia <span class="keyword">ban </span>ha</span><br><span class="line"><span class="keyword">shao </span>ye wu ya he <span class="keyword">shui </span>you <span class="keyword">dian </span>duo</span><br><span class="line">liu wan <span class="keyword">bu </span>yao ci dao</span><br><span class="line">ni hai <span class="keyword">shi </span>su yan a</span><br><span class="line">yao <span class="keyword">diao </span>deng</span><br><span class="line"><span class="keyword">sha </span>ye ting <span class="keyword">bu </span><span class="keyword">jian</span></span><br><span class="line"><span class="keyword"></span>y y d s</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这里读入的时候是使用getline（应该都会getline吧）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">vector&lt;string&gt; v;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">getline</span>(cin, s);</span><br><span class="line">    v.<span class="built_in">push_back</span>(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>接下来是吃火锅，他给出一行共 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi>n</mi></mrow><annotation encoding="application/x-tex">2n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord mathnormal">n</span></span></span></span> 个数，第一个是材料的价格第二个是材料的价钱，怎么优雅地读入
这里可以使用 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi>s</mi><mi>t</mi><mi>r</mi><mi>e</mi><mi>a</mi><mi>m</mi></mrow><annotation encoding="application/x-tex">stringstream</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">e</span><span class="mord mathnormal">a</span><span class="mord mathnormal">m</span></span></span></span></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    <span class="built_in">getline</span>(cin, s);</span><br><span class="line">    <span class="function">stringstream <span class="title">ss</span><span class="params">(s)</span></span>;</span><br><span class="line">    <span class="type">int</span> a, b;</span><br><span class="line">    <span class="keyword">while</span> (ss &gt;&gt; a &gt;&gt; b)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里我们再介绍一下stringstream的用法</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    stringstream ss;</span><br><span class="line">    ss &lt;&lt; <span class="string">&quot;123 456&quot;</span>;</span><br><span class="line">    <span class="type">int</span> a, b;</span><br><span class="line">    ss &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    cout &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里我读入了一个字符串，然后用stringstream读入了两个整数
stringstream 还可以改变</p>
<p>输入以','的一串数字（因为期末考试没看到这个输入然后wa了）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">string s;</span><br><span class="line">    <span class="built_in">getline</span>(cin, s);</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; nums;</span><br><span class="line">    <span class="type">int</span> len = s.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == <span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            nums.<span class="built_in">push_back</span>(x);</span><br><span class="line">            x = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            x = x * <span class="number">10</span> + s[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    nums.<span class="built_in">push_back</span>(x);</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP与HTTPS</title>
    <url>/2024/07/16/HTTP%E4%B8%8EHTTPS/</url>
    <content><![CDATA[<h2 id="http的基本概念"><a class="markdownIt-Anchor" href="#http的基本概念"></a> HTTP的基本概念</h2>
<p>HTTP 是超文本传输协议，主要分为三个部分，超文本，传输，协议。
HTTP是明文传输的所以是不安全的，
HTTP是在计算机中两点之间传输超文本（文本、图片、音频、视频等）的协议。</p>
<h2 id="http和https的区别"><a class="markdownIt-Anchor" href="#http和https的区别"></a> HTTP和HTTPS的区别</h2>
<p>HTTP和HTTPS的主要区别在于安全性和加密性。</p>
<table>
<thead>
<tr>
<th>HTTP</th>
<th>HTTPS</th>
</tr>
</thead>
<tbody>
<tr>
<td>明文传输</td>
<td>加密传输</td>
</tr>
<tr>
<td>80</td>
<td>443</td>
</tr>
<tr>
<td>无证书</td>
<td>有证书</td>
</tr>
</tbody>
</table>
<p>HTTPS是在HTTP的基础上映入了SSL/TLS协议，SSL/TLS协议是在传输层对数据进行加密，保证数据的安全性。</p>
<h2 id="https解决了http的什么问题"><a class="markdownIt-Anchor" href="#https解决了http的什么问题"></a> HTTPS解决了HTTP的什么问题</h2>
<p>HTTPS在通讯建立前采用<code>非对称加密</code>的方式进行交换密钥，后续就不再使用非堆成加密。
HTTPS在通讯过程中全部使用<code>对称加密</code>的方式进行加密密文传输。</p>
<p>公钥加密是一种使用两个不同的密钥加密或签署数据的方法，并使其中一个密钥（即公钥）可供任何人使用。另一个密钥称为私钥。用公钥加密的数据只能用私钥解密。由于这种方法使用两个密钥而不是一个，公钥加密也称为非对称加密。</p>
<span id="more"></span>
<p>具体使用https的web服务器</p>
<ul>
<li>客户使用https的URL访问web服务器</li>
<li>web服务器将自己的公钥证书发送给客户端</li>
<li>客户端收到了web服务器的公钥证书，验证证书的合法性，建立会话密钥，注意这个会话密钥是对称加密的</li>
<li>web服务器利用自己的私钥解密会话密钥，建立安全通道</li>
</ul>
<h2 id="https的缺点"><a class="markdownIt-Anchor" href="#https的缺点"></a> HTTPS的缺点</h2>
<p>HTTPS虽然比HTTP更加安全，但是HTTPS对服务器的压力更大，因为HTTPS需要对数据进行加密解密，所以会消耗更多的服务器资源。
在HTTPS的握手过程中，需要进行非对称加密，这个过程比较耗时，会影响网站的访问速度。
SSL证书是要费用的，所以小网站可能不会使用HTTPS。
SSL证书不仅有有效日期还要绑定域名。</p>
]]></content>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>2024-7-18 每日一题</title>
    <url>/2024/07/18/2024-7-18-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/</url>
    <content><![CDATA[<h2 id="没有优化的dijkstra"><a class="markdownIt-Anchor" href="#没有优化的dijkstra"></a> 没有优化的dijkstra</h2>
<p>今天的每日一题是<code>dijkstra</code>的变形，我是图论低手，开始我只会写没有优化的<code>dijkatra</code> ，复杂度是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>
这里先介绍一下没有优化的<code>dijkstra</code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m, s;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; s;</span><br><span class="line">    vector&lt;vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;&gt; <span class="built_in">g</span>(n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u, v, w;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">        g[u].<span class="built_in">push_back</span>(&#123;v, w&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 没有优化的dijkstra算法</span></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dis</span><span class="params">(n + <span class="number">1</span>, INT_MAX)</span></span>;</span><br><span class="line">    <span class="comment">// dis[i]表示从s到i的最短距离</span></span><br><span class="line">    <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">vis</span><span class="params">(n + <span class="number">1</span>, <span class="literal">false</span>)</span></span>;</span><br><span class="line">    <span class="comment">// 这里用来判断走没走过</span></span><br><span class="line">    dis[s] = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 初始化是dis[s]=0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> minn = INT_MAX, u = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!vis[j] &amp;&amp; dis[j] &lt; minn)</span><br><span class="line">            &#123;</span><br><span class="line">                minn = dis[j];</span><br><span class="line">                u = j;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 这里是找到距离最小的点</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (u == <span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        vis[u] = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 这里表示u点已经走过了</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> [v, w] : g[u])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (dis[v] &gt; dis[u] + w)</span><br><span class="line">            &#123;</span><br><span class="line">                dis[v] = dis[u] + w;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; dis[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里是一个没有优化的<code>dijkstra</code>算法</p>
<span id="more"></span>
<h2 id="堆优化的dijkstra"><a class="markdownIt-Anchor" href="#堆优化的dijkstra"></a> 堆优化的dijkstra</h2>
<p>这里介绍一下堆优化的<code>dijkstra</code>算法，复杂度是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nlogn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">g</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u, v, w;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">        g[u][v] = w;</span><br><span class="line">        g[v][u] = w;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/// 以上是读入的部分，读入一个u,v,w表示u到v有一条权值为w的边</span></span><br><span class="line">    <span class="comment">// 因为是无向图，所以g[u][v]=g[v][u]=w</span></span><br><span class="line">    <span class="comment">// 下面是从0到各点之间的最短距离</span></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dis</span><span class="params">(n, INT_MAX)</span></span>;</span><br><span class="line">    priority_queue&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;, vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;, greater&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;&gt; pq;</span><br><span class="line">    <span class="comment">// 这里使用的是priority_queue，每次取出的是距离最小的点其中我用了一个pair&lt;int,int&gt;来存储距离和点的编号</span></span><br><span class="line">    pq.<span class="built_in">push</span>(&#123;<span class="number">0</span>, <span class="number">0</span>&#125;);</span><br><span class="line">    <span class="comment">// 这里表示初始点是0，距离是0</span></span><br><span class="line">    dis[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!pq.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> [dist, u] = pq.<span class="built_in">top</span>();</span><br><span class="line">        pq.<span class="built_in">pop</span>(); <span class="comment">// 注意这里要pop出去</span></span><br><span class="line">        <span class="keyword">if</span> (dis[u] &lt; dist)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="comment">// 这里是因为会有重边所以要讨论一下去除重边</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (g[u][i] != <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (dis[i] &gt; dis[u] + g[u][i])</span><br><span class="line">                &#123;</span><br><span class="line">                    dis[i] = dis[u] + g[u][i];</span><br><span class="line">                    pq.<span class="built_in">push</span>(&#123;dis[i], i&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; dis[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 这里输出的就是从0到各点的最短距离</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里是堆优化的<code>dijkstra</code>算法</p>
<h2 id="今天的题目-3112-访问消失节点的最少时间"><a class="markdownIt-Anchor" href="#今天的题目-3112-访问消失节点的最少时间"></a> 今天的题目 3112. 访问消失节点的最少时间</h2>
<p>这里与板子的主要区别就是注意那些不能到达的点，如果点不能到达后续就不能利用它来更新</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">minimumTime</span><span class="params">(<span class="type">int</span> n, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; edges,</span></span></span><br><span class="line"><span class="params"><span class="function">                            vector&lt;<span class="type">int</span>&gt;&amp; disappear)</span> </span>&#123;</span><br><span class="line">        vector&lt;vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;&gt; <span class="built_in">g</span>(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> edge : edges) &#123;</span><br><span class="line">            <span class="type">int</span> u = edge[<span class="number">0</span>], v = edge[<span class="number">1</span>], w = edge[<span class="number">2</span>];</span><br><span class="line">            g[u].<span class="built_in">emplace_back</span>(v, w);</span><br><span class="line">            g[v].<span class="built_in">emplace_back</span>(u, w);</span><br><span class="line">        &#125;</span><br><span class="line">        priority_queue &lt; pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;, vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;,</span><br><span class="line">            greater&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;&gt;q;</span><br><span class="line">        q.<span class="built_in">emplace</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ans</span><span class="params">(n, <span class="number">-1</span>)</span></span>;</span><br><span class="line">        ans[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">auto</span> [dis, tar] = q.<span class="built_in">top</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span> (dis &gt; ans[tar])</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; [v, w] : g[tar]) &#123;</span><br><span class="line">                <span class="type">int</span> now_dis = ans[tar] + w;</span><br><span class="line">                <span class="keyword">if</span> (now_dis &lt; disappear[v] &amp;&amp;</span><br><span class="line">                    (ans[v] &lt; <span class="number">0</span> || now_dis &lt; ans[v])) &#123;</span><br><span class="line">                    ans[v] = now_dis;</span><br><span class="line">                    q.<span class="built_in">emplace</span>(now_dis, v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>写这道题的时候<code>priority_queue</code>忘记怎么写了还是有必要复习一下priority_queue的用法</p>
<h2 id="priority_queue的用法"><a class="markdownIt-Anchor" href="#priority_queue的用法"></a> priority_queue的用法</h2>
<p>prioritt_queue 默认是大根堆，如果要用小根堆的话可以这样写</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt;&gt; q;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP的状态码</title>
    <url>/2024/07/17/HTTP%E7%9A%84%E7%8A%B6%E6%80%81%E7%A0%81/</url>
    <content><![CDATA[<h1 id="五大类http状态码"><a class="markdownIt-Anchor" href="#五大类http状态码"></a> 五大类HTTP状态码</h1>
<table>
<thead>
<tr>
<th>状态码范围</th>
<th>状态码类型</th>
<th>状态码描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>1xx</td>
<td>信息性状态码</td>
<td>接收的请求正在处理</td>
</tr>
<tr>
<td>2xx</td>
<td>成功状态码</td>
<td>请求正常处理完毕</td>
</tr>
<tr>
<td>3xx</td>
<td>重定向状态码</td>
<td>需要进行附加操作以完成请求</td>
</tr>
<tr>
<td>4xx</td>
<td>客户端错误状态码</td>
<td>服务器无法处理请求</td>
</tr>
<tr>
<td>5xx</td>
<td>服务器错误状态码</td>
<td>服务器处理请求出错</td>
</tr>
</tbody>
</table>
<span id="more"></span>
<ul>
<li>
<p>100-199：提示信息，表示目前是协议处理的中间状态，还需要后续操作。</p>
</li>
<li>
<p>200-299：成功接收到了请求，请求被正常处理。</p>
<ul>
<li>200 OK：请求成功。</li>
<li>204 No Content：请求成功，但是没有返回内容。</li>
<li>206 Partial Content：请求成功，但是只返回部分内容。</li>
</ul>
</li>
<li>
<p>300-399：重定向状态码，需要进行附加操作以完成请求。</p>
<ul>
<li>301 Moved Permanently:永久重定向，表示请求的资源已经不再了需要改用新的URL</li>
<li>302 Found：临时重定向，表示暂时需要另一个URL来访问资，请求的资源还是存在的</li>
<li>304 Not Modified：未修改，表示资源未被修改，可以直接使用缓存的资源</li>
</ul>
</li>
<li>
<p>400-499：客户端错误状态码，服务器无法处理请求。</p>
<ul>
<li>400 Bad Request：请求错误，服务器无法理解请求。</li>
<li>401 Unauthorized：未授权，需要进行身份验证。</li>
<li>403 Forbidden：禁止访问，服务器拒绝请求。</li>
<li>404 Not Found：未找到，服务器找不到请求的资源。</li>
<li>405 Method Not Allowed：方法不允许，请求方法不被允许。</li>
<li>408 Request Timeout：请求超时，服务器等待请求的时间过长。</li>
</ul>
</li>
<li>
<p>500-599：服务器错误状态码，服务器处理请求出错。</p>
<ul>
<li>500 Internal Server Error：服务器内部错误，服务器遇到错误，无法完成请求。</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript的Set</title>
    <url>/2024/07/18/JavaScript%E7%9A%84Set/</url>
    <content><![CDATA[<h2 id="javascript的set"><a class="markdownIt-Anchor" href="#javascript的set"></a> Javascript的Set</h2>
<p>在ES6中新增了Set这个数据结构，它类似于数组，但是成员的值都是唯一的，没有重复的值。
注意的是不同于CPP的set，Javascript的Set是没有排序的
这里介绍一下Set的基本用法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set); <span class="comment">// Set(4) &#123; 1, 2, 3, 4 &#125;</span></span><br></pre></td></tr></table></figure>
<p>这里我将一个数组传入了Set，Set会自动去重，所以最后的结果是<code>Set(4) &#123; 1, 2, 3, 4 &#125;</code>
当然你也可以通过add方法添加元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    set.<span class="title function_">add</span>(item);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set); <span class="comment">// Set(4) &#123; 1, 2, 3, 4 &#125;</span></span><br></pre></td></tr></table></figure>
<p>这里我使用了<code>forEach</code>，<code>forEach</code>的第一个参数是数组的元素，第二个参数是数组的下标，第三个参数是数组本身</p>
<h3 id="set的一些常用方法"><a class="markdownIt-Anchor" href="#set的一些常用方法"></a> set的一些常用方法</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set.<span class="title function_">has</span>(<span class="number">1</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set.<span class="property">size</span>); <span class="comment">// 4</span></span><br><span class="line">set.<span class="title function_">delete</span>(<span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set); <span class="comment">// Set(3) &#123; 2, 3, 4 &#125;</span></span><br><span class="line">set.<span class="title function_">clear</span>();<span class="comment">// 清空set</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set); <span class="comment">// Set(0) &#123;&#125;</span></span><br><span class="line">set.<span class="title function_">add</span>(<span class="number">1</span>);</span><br><span class="line">set.<span class="title function_">add</span>(<span class="number">2</span>);</span><br><span class="line">set.<span class="title function_">add</span>(<span class="number">3</span>);</span><br><span class="line">set.<span class="title function_">add</span>(<span class="number">4</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set); <span class="comment">// Set(4) &#123; 1, 2, 3, 4 &#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>以上就是<code>set</code>的基础用法</p>
<span id="more"></span>
<h3 id="set的遍历"><a class="markdownIt-Anchor" href="#set的遍历"></a> Set的遍历</h3>
<p>Set的遍历有两种方法，一种是使用<code>forEach</code>，另一种是使用<code>for...of</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>]);</span><br><span class="line">set.<span class="title function_">forEach</span>(<span class="function">(<span class="params">value, key, set</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value, key, set);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> set) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="set的应用"><a class="markdownIt-Anchor" href="#set的应用"></a> Set的应用</h3>
<p>Set可以用来去重，比如下面的例子</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>(arr);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([...set]); <span class="comment">// [ 1, 2, 3, 4, 5, 6 ]</span></span><br></pre></td></tr></table></figure>
<p>对于我这样的初学者不是很能理解<code>...set</code>，这个是ES6的扩展运算符，可以将一个数组转为用逗号分隔的参数序列，就不会有前面的<code>Set(6) </code>部分</p>
]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP缓存技术</title>
    <url>/2024/07/23/HTTP%E7%BC%93%E5%AD%98%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>暑假的计划</title>
    <url>/2024/07/14/%E6%9A%91%E5%81%87%E7%9A%84%E8%AE%A1%E5%88%92/</url>
    <content><![CDATA[<h1 id="暑假的计划"><a class="markdownIt-Anchor" href="#暑假的计划"></a> 暑假的计划</h1>
<p>因为水平不行，必须考虑找工作的事情，所以暑假准备学习一下前端的相关内容，具体的，根据牛客大佬的建议主要的路线如下</p>
<ol>
<li>
<p>HTML、CSS、JavaScript基础。学完基础后，可以找个项目实战练习下。</p>
</li>
<li>
<p>JavaScript语法进阶。包括：作用域和闭包、this和对象原型等。相信我，JS语法，永远是面试中最重要的部分。</p>
</li>
<li>
<p>ES6语法。这部分属于JS新增的语法，面试必问。其中，关于 promise、async 等内容要尤其关注。</p>
</li>
<li>
<p>HTML5和CSS3。要熟悉其中的新特性。</p>
</li>
<li>
<p>前端框架：Vue.js和React。这两个框架至少要会一个。入门时，建议先学Vue.js，上手相对容易。但无论如何，同时掌握 Vue 和 React 才是合格的前端同学。</p>
</li>
</ol>
<span id="more"></span>
<ol start="6">
<li>
<p>UI框架：Ant Design、Element UI。在做管理后台的时候，这两个UI框架使用的比较多的。Element UI 是基于 Vue.js技术栈的。Ant Design 既有基于 React技术栈的。</p>
</li>
<li>
<p>Node.js。属于加分项，如果时间不够，可以先不学，但至少要知道 Node 环境的配置，以及 Node 的一些基础知识。</p>
</li>
<li>
<p>前端工程化：构建工具 Webpack、构建工具 gulp、CSS 预处理器 Sass、自动化测试、持续集成 等。</p>
</li>
<li>
<p>前端综合：HTTP协议、跨域通信、安全问题（CSRF、XSS）、浏览器渲染机制、异步和单线程、页面性能优化、防抖动（Debouncing）和节流阀（Throtting）、lazyload、前端错误监控、虚拟DOM等。</p>
</li>
<li>
<p>TypeScript（简称TS）。ES 是 JS 的标准，TS 是 JS 的超集。TS属于进阶内容，建议把上面的基础掌握之后，再学TS。</p>
</li>
<li>
<p>小程序开发。学会基本的JS语法，再了解小程序独有的API（参考小程序的官方文档），就已经掌握了小程序开发，没有你想象的那么难</p>
</li>
</ol>
<p>如果可能会在这里同步更新每天的进度，同时会有一些八股之类的东西，希望暑假还是可以好好把握，以后可以混一口饭吃。</p>
]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>数值计算</title>
    <url>/2024/05/27/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97/</url>
    <content><![CDATA[<h1 id="数值计算期末考试复习"><a class="markdownIt-Anchor" href="#数值计算期末考试复习"></a> 数值计算期末考试复习</h1>
<h2 id="实验一"><a class="markdownIt-Anchor" href="#实验一"></a> 实验一</h2>
<h4 id="求近似值"><a class="markdownIt-Anchor" href="#求近似值"></a> 求近似值</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">case_one</span>(<span class="params">num=<span class="number">8</span></span>):</span><br><span class="line">    I0 = <span class="number">1</span> - math.exp(-<span class="number">1.0</span>)</span><br><span class="line">    <span class="comment"># I0= input()</span></span><br><span class="line">    <span class="comment"># I0 = float(I0) 读入一个float形式的I0</span></span><br><span class="line">    <span class="comment"># I0 =1-e^-1</span></span><br><span class="line">    I0 = <span class="built_in">float</span>(<span class="string">&quot;&#123;0:.8f&#125;&quot;</span>.<span class="built_in">format</span>(I0))</span><br><span class="line">    <span class="built_in">print</span>(I0)</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, num + <span class="number">1</span>):</span><br><span class="line">        I1 = <span class="number">1</span> - k * I0</span><br><span class="line">        I0 = I1</span><br><span class="line">        I0 = <span class="built_in">float</span>(<span class="string">&quot;&#123;0:.8f&#125;&quot;</span>.<span class="built_in">format</span>(I0))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%d, %.8f&quot;</span> % (k, I0))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">case_two</span>(<span class="params">num=<span class="number">8</span></span>):</span><br><span class="line">    I1 = <span class="number">0.1124</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(num, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">        I0 = (<span class="number">1</span> - I1) / k</span><br><span class="line">        I1 = I0</span><br><span class="line">        I1 = <span class="built_in">float</span>(<span class="string">&quot;&#123;0:.4f&#125;&quot;</span>.<span class="built_in">format</span>(I1))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%d, %.4f&quot;</span> % (k - <span class="number">1</span>, I1))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    chos1 = <span class="built_in">input</span>()</span><br><span class="line">    chos = <span class="built_in">int</span>(chos1)</span><br><span class="line">    <span class="keyword">if</span> chos1 == <span class="string">&quot;1&quot;</span>:</span><br><span class="line">        case_one()</span><br><span class="line">    <span class="keyword">elif</span> chos1 == <span class="string">&quot;2&quot;</span>:</span><br><span class="line">        case_two()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>第一题读入一个数值choose然后选择，第一个函数的推导公式是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>=</mo><mn>1</mn><mo>−</mo><mi>n</mi><msub><mi>T</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">T_{n+1}=1-nT_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal">n</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，第二个函数的推导公式是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mi>n</mi></msub><mo>=</mo><mfrac><mrow><mn>1</mn><mo>−</mo><msub><mi>T</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><mi>n</mi></mfrac></mrow><annotation encoding="application/x-tex">T_n=\frac{1-T_{n-1}}{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.275096em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.930096em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.451765em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173142857142857em;"><span style="top:-2.357em;margin-left:-0.13889em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.20252142857142857em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，然后输出结果其中中间的过程保留小数通过format函数保留小数点后8位，第二个函数保留小数点后4位。</p>
<span id="more"></span>
<h3 id="泰勒展开求解sinx"><a class="markdownIt-Anchor" href="#泰勒展开求解sinx"></a> 泰勒展开求解sin(x)</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve_sin</span>(<span class="params">x, change=<span class="number">1e-3</span></span>):</span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="comment"># i 是第i项</span></span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    term = x</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">abs</span>(term) &gt; change:</span><br><span class="line">        <span class="built_in">sum</span> += term</span><br><span class="line">        term *= -x * x / (<span class="number">2</span> * i) / (<span class="number">2</span> * i + <span class="number">1</span>)</span><br><span class="line">        <span class="comment"># term = -x * x / (2 * i) / (2 * i + 1) * term</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="built_in">sum</span> += term</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">round</span>(<span class="built_in">sum</span>, <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve_cos</span>(<span class="params">x, change=<span class="number">1e-3</span></span>):</span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="comment"># i 是第i项</span></span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    term = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">abs</span>(term) &gt; change:</span><br><span class="line">        <span class="built_in">sum</span> += term</span><br><span class="line">        term *= -x * x / (<span class="number">2</span> * i) / (<span class="number">2</span> * i - <span class="number">1</span>)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="built_in">sum</span> += term</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">round</span>(<span class="built_in">sum</span>, <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x = <span class="built_in">float</span>(<span class="built_in">input</span>())</span><br><span class="line">x = math.fmod(x, <span class="number">2</span> * math.pi)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">format</span>(solve_sin(x), <span class="string">&quot;.8f&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">format</span>(solve_cos(x), <span class="string">&quot;.8f&quot;</span>))</span><br></pre></td></tr></table></figure>
<p>题目是泰勒展开求解sin(x)和cos(x)，然后读入一个数值x，然后通过format函数保留小数点后8位，然后输出结果。
format函数的用法是format(数值，&quot;.nf&quot;)，其中n是保留小数点后n位。</p>
<h2 id="实验二"><a class="markdownIt-Anchor" href="#实验二"></a> 实验二</h2>
<h3 id="二分法求解方程"><a class="markdownIt-Anchor" href="#二分法求解方程"></a> 二分法求解方程</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 二分法</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> np.exp(x) + <span class="number">10</span> * x - <span class="number">2</span>  <span class="comment"># 定义函数e</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dichotomy</span>(<span class="params">a, b, tol</span>):</span><br><span class="line">    mid = (a + b) / <span class="number">2</span>  <span class="comment"># 初始化中点</span></span><br><span class="line">    y1 = func(a)</span><br><span class="line">    y2 = func(b)</span><br><span class="line">    <span class="keyword">if</span> y1 * y2 &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span>  <span class="comment"># 输出失败信息</span></span><br><span class="line">    k = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> b - a &gt;= tol:  <span class="comment"># b - a &lt; e</span></span><br><span class="line">        mid = (a + b) / <span class="number">2</span></span><br><span class="line">        y = func(mid)</span><br><span class="line">        <span class="comment"># print(k, a, b, func(a), func(b), func(mid), mid)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">abs</span>(y) &lt; <span class="number">1e-8</span>:  <span class="comment"># y=0, 满足精度要求</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> y1 * y &lt; <span class="number">0</span>:</span><br><span class="line">            b = mid</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            a = mid</span><br><span class="line">            y1 = y</span><br><span class="line">        k = k + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    mid = (a + b) / <span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%.5f, %.9f&quot;</span> % (mid, func(mid)))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> mid</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment">## sample input: -1 1 0.5e-3</span></span><br><span class="line">    a, b, tol = <span class="built_in">map</span>(<span class="built_in">float</span>, <span class="built_in">input</span>().split())</span><br><span class="line">    dichotomy(a, b, tol)</span><br></pre></td></tr></table></figure>
<p>标准的二分求解注意要在最后一次二分之后加上去，其中total是精度func是定义函数的地方，然后读入一个数值a,b,tol，然后输出结果。</p>
<h3 id="不动点法求迭代方程"><a class="markdownIt-Anchor" href="#不动点法求迭代方程"></a> 不动点法求迭代方程</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 不动点迭代</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ff</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> math.exp(x) + <span class="number">10</span> * x - <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ff0</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">2</span> - math.exp(x)) / <span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f0</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x**<span class="number">3</span> - x - <span class="number">1.0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gf0</span>(<span class="params">x, <span class="keyword">case</span>=<span class="number">1</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">case</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> (x + <span class="number">1.0</span>) ** (<span class="number">1</span> / <span class="number">3.0</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> x**<span class="number">3</span> - <span class="number">1.0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f1</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x - x ** (<span class="number">1</span> / <span class="number">3.0</span>) - <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gf1</span>(<span class="params">x, <span class="keyword">case</span>=<span class="number">2</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">case</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> x ** (<span class="number">1</span> / <span class="number">3.0</span>) + <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="keyword">case</span> == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> (x - <span class="number">2.0</span>) ** <span class="number">3</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> (<span class="number">6</span> + <span class="number">2</span> * x ** (<span class="number">1</span> / <span class="number">3.0</span>)) / (<span class="number">3</span> - x ** (-<span class="number">2.0</span> / <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f2</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x - math.exp(-x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gf2</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> math.exp(-x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fixed_point</span>(<span class="params">x0, tol, func, gfunc, N=<span class="number">100</span></span>):</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">        <span class="comment"># print(k, x0, func(x0))</span></span><br><span class="line">        <span class="comment"># 输出的是迭代次数，当前迭代值，当前迭代值的函数值</span></span><br><span class="line">        x1 = gfunc(x0)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">abs</span>(x1 - x0) &lt; tol:</span><br><span class="line">            x0 = x1</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;%.5f, %.9f&quot;</span> % (x1, func(x1)))</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        x0 = x1</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;达到最大迭代次数！&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># x0 = 1.5</span></span><br><span class="line">    <span class="comment"># tol = 1e-5</span></span><br><span class="line">    <span class="comment"># fixed_point(x0, tol, func=f0, gfunc=gf0)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># x0 = 3.5</span></span><br><span class="line">    <span class="comment"># tol = 1e-8</span></span><br><span class="line">    <span class="comment"># fixed_point(x0, tol, func=f1, gfunc=gf1)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># x0 = 0.5</span></span><br><span class="line">    <span class="comment"># tol = 1e-5</span></span><br><span class="line">    <span class="comment"># fixed_point(x0, tol, func=f2, gfunc=gf2)</span></span><br><span class="line">    x0 = <span class="number">0</span></span><br><span class="line">    total = <span class="number">0.5e-3</span></span><br><span class="line">    fixed_point(x0, total, func=ff, gfunc=ff0)</span><br></pre></td></tr></table></figure>
<h3 id="牛顿迭代法"><a class="markdownIt-Anchor" href="#牛顿迭代法"></a> 牛顿迭代法</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 牛顿迭代法</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># import matplotlib.pyplot as plt</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun0</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x**<span class="number">3</span> - x - <span class="number">1</span></span><br><span class="line">    <span class="comment"># return x - np.cos(x)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gfun0</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span> * x**<span class="number">2</span> - <span class="number">1</span></span><br><span class="line">    <span class="comment"># return 1 + np.sin(x)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ff</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> np.exp(x) + <span class="number">10</span> * x - <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ff1</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> np.exp(x) + <span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># def draw_line(x0, x1, func, num=100):</span></span><br><span class="line"><span class="comment">#     xs = np.linspace(x0, x1, num)</span></span><br><span class="line"><span class="comment">#     ys = func(xs)</span></span><br><span class="line"><span class="comment">#     plt.figure()</span></span><br><span class="line"><span class="comment">#     plt.plot(xs, ys, &quot;r&quot;)</span></span><br><span class="line"><span class="comment">#     plt.show()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">newton_iteration</span>(<span class="params">x0, tol, gfunc, func, N=<span class="number">100</span></span>):</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">        <span class="comment"># print(&quot;k=%d, x=%.6f, f(x)=%.6f&quot; % (k, x0, func(x0)))</span></span><br><span class="line">        f0, g0 = func(x0), gfunc(x0)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">abs</span>(g0) &lt; <span class="number">1e-9</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;梯度为零！&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        x1 = x0 - f0 / g0</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">abs</span>(x1 - x0) &lt; tol:</span><br><span class="line">            <span class="comment"># print(&quot;k=%d, x=%.6f, f(x)=%.6f&quot; % (k + 1, x1, func(x1)))</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;%.8f&quot;</span> % (x1))</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        x0 = x1</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;达到最大迭代次数&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># x0, tol = 1, 1e-5  # x0 = 1, 0, pi/2</span></span><br><span class="line">    x0, tol = <span class="built_in">map</span>(<span class="built_in">float</span>, <span class="built_in">input</span>().split())</span><br><span class="line">    newton_iteration(x0, tol, func=ff, gfunc=ff1)</span><br><span class="line">    <span class="comment"># draw_line(0, np.pi / 2, func=fun0)</span></span><br></pre></td></tr></table></figure>
<p>这里的ff1是由ff求导获得的需要注意，然后达到精度范围就输出了，然后读入一个数值x0,tol，然后输出结果。</p>
<h3 id="牛顿下山法"><a class="markdownIt-Anchor" href="#牛顿下山法"></a> 牛顿下山法</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ff</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> np.exp(x) + <span class="number">10</span> * x - <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ff1</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> np.exp(x) + <span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">newton_downhill</span>(<span class="params">x0, tol, gfunc, func, N=<span class="number">100</span></span>):</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">        <span class="comment"># print(&quot;k=%d, x=%.6f, f(x)=%.6f&quot; % (k, x0, func(x0)))</span></span><br><span class="line">        f0, g0 = func(x0), gfunc(x0)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">abs</span>(g0) &lt; <span class="number">1e-9</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;梯度为零！&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        x1 = x0 - f0 / g0</span><br><span class="line">        <span class="comment"># 线性搜索</span></span><br><span class="line">        lam = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">            x1_ = lam * x1 + (<span class="number">1</span> - lam) * x0</span><br><span class="line">            <span class="comment">#这一步是为了寻找下降的点</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">abs</span>(func(x1_)) &lt; <span class="built_in">abs</span>(func(x0)):  <span class="comment"># 下降条件</span></span><br><span class="line">                x1 = x1_</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;%d, %.6f, %.6f, %.6f&quot;</span> % (k, lam, x1_, func(x1_)))</span><br><span class="line">            lam *= <span class="number">0.5</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">abs</span>(x1 - x0) &lt; tol:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;%.8f, %.6f&quot;</span> % (x1, func(x1)))</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        x0 = x1</span><br><span class="line">        <span class="keyword">pass</span>  <span class="comment"># pass 是空语句，是为了保持程序结构的完整性</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;达到最大迭代次数&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x0, tol = <span class="built_in">map</span>(<span class="built_in">float</span>, <span class="built_in">input</span>().split())</span><br><span class="line">newton_downhill(x0, tol, func=ff, gfunc=ff1)</span><br></pre></td></tr></table></figure>
<p>牛顿下山法和牛顿迭代法的区别在于牛顿下山法是在牛顿迭代法的基础上加上了线性搜索，然后读入一个数值x0,tol，然后输出结果。</p>
<h3 id="弦截法"><a class="markdownIt-Anchor" href="#弦截法"></a> 弦截法</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ff</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> np.exp(x) + <span class="number">10</span> * x - <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ff1</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> np.exp(x) + <span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">secant</span>(<span class="params">x0, tol, gfunc, func, N=<span class="number">100</span>, digit=<span class="number">6</span></span>):</span><br><span class="line">    fmt = <span class="string">&quot;k=%d, x=%.&quot;</span> + <span class="built_in">str</span>(digit) + <span class="string">&quot;f, f(x)=%.&quot;</span> + <span class="built_in">str</span>(digit) + <span class="string">&quot;f&quot;</span></span><br><span class="line">    f0, g0 = func(x0), gfunc(x0)</span><br><span class="line">    <span class="comment"># print(fmt % (0, x0, f0))</span></span><br><span class="line">    x1 = x0 - f0 / g0</span><br><span class="line">    f1 = func(x1)</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, N):</span><br><span class="line">        <span class="comment"># print(fmt % (k, x1, func(x1)))</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">abs</span>(f1 - f0) &lt; <span class="number">1e-9</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;梯度为零！&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        x2 = x1 - f1 * (x1 - x0) / (f1 - f0)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">abs</span>(x2 - x1) &lt; tol:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;%.8f, %.6f&quot;</span> % (x2, func(x2)))</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        x0, f0 = x1, f1</span><br><span class="line">        x1, f1 = x2, func(x2)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;达到最大迭代次数&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xo, tol = <span class="built_in">map</span>(<span class="built_in">float</span>, <span class="built_in">input</span>().split())</span><br><span class="line">secant(xo, tol, func=ff, gfunc=ff1)</span><br></pre></td></tr></table></figure>
<h2 id="实验三"><a class="markdownIt-Anchor" href="#实验三"></a> 实验三</h2>
<h3 id="艾特肯法求方程的根"><a class="markdownIt-Anchor" href="#艾特肯法求方程的根"></a> 艾特肯法求方程的根</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># x=ax^3+b</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">a: <span class="built_in">float</span>, b: <span class="built_in">float</span>, x: <span class="built_in">float</span></span>):</span><br><span class="line">    <span class="keyword">return</span> a * x**<span class="number">3</span> + b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aitken</span>(<span class="params">a: <span class="built_in">float</span>, b: <span class="built_in">float</span>, x: <span class="built_in">float</span></span>):</span><br><span class="line">    lastx = x</span><br><span class="line">    y = x + <span class="number">100</span></span><br><span class="line">    z = x + <span class="number">100</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        lastx = x</span><br><span class="line">        y = fun(a, b, x)</span><br><span class="line">        z = fun(a, b, y)</span><br><span class="line">        x = x - (y - x) ** <span class="number">2</span> / (z - <span class="number">2</span> * y + x)  <span class="comment"># aitken 的迭代公式</span></span><br><span class="line">        <span class="comment"># print(f&quot;debug : &#123;y:.6f&#125;, &#123;z:.6f&#125;, &#123;x:.6f&#125;&quot;)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">abs</span>(lastx - x) &lt; <span class="number">1e-5</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">            <span class="comment">#这里有个精度问题</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;y:<span class="number">.6</span>f&#125;</span>, <span class="subst">&#123;z:<span class="number">.6</span>f&#125;</span>, <span class="subst">&#123;x:<span class="number">.6</span>f&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a, b, x0 = <span class="built_in">map</span>(<span class="built_in">float</span>, <span class="built_in">input</span>().split())</span><br><span class="line">aitken(a, b, x0)</span><br></pre></td></tr></table></figure>
<p>输入的是a,b,x0，然后输出结果。</p>
<h3 id="求解实部虚部"><a class="markdownIt-Anchor" href="#求解实部虚部"></a> 求解实部虚部</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">newton</span>(<span class="params">f, df, x0, tol=<span class="number">1e-5</span>, num=<span class="number">1000</span></span>):</span><br><span class="line">    x = x0</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        <span class="keyword">if</span> df(x) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;error&quot;</span></span><br><span class="line">        x_new = x - f(x) / df(x)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">abs</span>(x_new.real - x.real) &lt; tol <span class="keyword">and</span> <span class="built_in">abs</span>(x_new.imag - x.imag) &lt; tol:</span><br><span class="line">            x_new = x - f(x) / df(x)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&#123;:.8f&#125; &#123;:.8f&#125;i&quot;</span>.<span class="built_in">format</span>(x_new.real, x_new.imag)</span><br><span class="line">        x = x_new</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;error&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = <span class="keyword">lambda</span> x: x**<span class="number">4</span> + <span class="number">2</span> * x**<span class="number">3</span> - x - <span class="number">1</span></span><br><span class="line">df = <span class="keyword">lambda</span> x: <span class="number">4</span> * x**<span class="number">3</span> + <span class="number">6</span> * x**<span class="number">2</span> - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">x0, xi = <span class="built_in">map</span>(<span class="built_in">float</span>, <span class="built_in">input</span>().split())</span><br><span class="line">x0 = <span class="built_in">complex</span>(x0, xi)</span><br><span class="line"><span class="built_in">print</span>(newton(f, df, x0))</span><br></pre></td></tr></table></figure>
<p>输入的是实部虚部，然后输出结果。</p>
<h3 id="列主元消元法求解线性方程组"><a class="markdownIt-Anchor" href="#列主元消元法求解线性方程组"></a> 列主元消元法求解线性方程组</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列主元消元法求解线性方程组</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_matrix</span>(<span class="params">a</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> i:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;j:<span class="number">.5</span>f&#125;</span>&quot;</span>, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># column pivot gauss</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gauss</span>(<span class="params">a, b</span>):</span><br><span class="line">    n = b.size</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        k = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>, n):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">abs</span>(a[j, i]) &gt; <span class="built_in">abs</span>(a[k, i]):</span><br><span class="line">                k = j</span><br><span class="line">        <span class="keyword">if</span> k != i:</span><br><span class="line">            a[[i, k]] = a[[k, i]]</span><br><span class="line">            b[[i, k]] = b[[k, i]]</span><br><span class="line">        <span class="comment"># print_matrix(a)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>, n):</span><br><span class="line">            c = a[j, i] / a[i, i]</span><br><span class="line">            a[j] -= c * a[i]</span><br><span class="line">            b[j] -= c * b[i]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(a)</span></span><br><span class="line">    x = np.zeros(n)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        x[i] = (b[i] - np.dot(a[i, i + <span class="number">1</span>:], x[i + <span class="number">1</span>:])) / a[i, i]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    s = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">float</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">    a = np.array(s)</span><br><span class="line">    s = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">float</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">    b = np.array(s)</span><br><span class="line">    a = a.reshape(b.size, -<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    x = gauss(a, b)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> x:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;i:<span class="number">.5</span>f&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>这里求解的是Ax=b的解，输入的是矩阵A和b，然后输出结果。</p>
<h3 id="求矩阵的逆"><a class="markdownIt-Anchor" href="#求矩阵的逆"></a> 求矩阵的逆</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">A</span>):</span><br><span class="line">    A = np.array(A, dtype=<span class="built_in">float</span>)</span><br><span class="line">    n = A.shape[<span class="number">0</span>]</span><br><span class="line">    attend = np.hstack([A, np.eye(n)])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        max_row = np.argmax(np.<span class="built_in">abs</span>(attend[i:, i])) + i</span><br><span class="line">        attend[[i, max_row]] = attend[[max_row, i]]</span><br><span class="line">        attend[i] = attend[i] / attend[i, i]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">if</span> i != j:</span><br><span class="line">                attend[j] -= attend[i] * attend[j, i]</span><br><span class="line">    A_inv = attend[:, n:]</span><br><span class="line">    <span class="keyword">return</span> np.<span class="built_in">round</span>(A_inv, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve2</span>():</span><br><span class="line">    A=<span class="built_in">input</span>().strip().split()</span><br><span class="line">    size=<span class="built_in">int</span>(<span class="built_in">len</span>(A)**<span class="number">0.5</span>)</span><br><span class="line">    A=[<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">float</span>,A[i*size:(i+<span class="number">1</span>)*size])) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(size)]</span><br><span class="line">    A_1=np.linalg.inv(A)</span><br><span class="line">    <span class="keyword">for</span>(row) <span class="keyword">in</span> A_1:</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> row:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;x:<span class="number">.5</span>f&#125;</span>&quot;</span>,end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    A = <span class="built_in">input</span>().strip().split()</span><br><span class="line">    size = <span class="built_in">int</span>(<span class="built_in">len</span>(A) ** <span class="number">0.5</span>)  </span><br><span class="line">    A = [<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">float</span>, A[i*size:(i+<span class="number">1</span>)*size])) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(size)]</span><br><span class="line">    A_1 = solve(A)</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> A_1:</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> row:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;x:<span class="number">.5</span>f&#125;</span>&quot;</span>, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="lu分解法求解线性方程组"><a class="markdownIt-Anchor" href="#lu分解法求解线性方程组"></a> LU分解法求解线性方程组</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># LU分解法求解线性方程组</span></span><br><span class="line"><span class="comment"># LU分解法求解线性方程组</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">LU</span>(<span class="params">A</span>):</span><br><span class="line">    n = A.shape[<span class="number">0</span>]</span><br><span class="line">    L = np.identity(n)</span><br><span class="line">    U = np.zeros((n, n))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        L[i, i] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i, n):</span><br><span class="line">            U[i, j] = A[i, j] - np.dot(L[i, :i], U[:i, j])</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>, n):</span><br><span class="line">            L[j, i] = (A[j, i] - np.dot(L[j, :i], U[:i, i])) / U[i, i]</span><br><span class="line">    <span class="keyword">return</span> L, U</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">L, U, b</span>):</span><br><span class="line">    n = b.shape[<span class="number">0</span>]</span><br><span class="line">    y = np.zeros(n)</span><br><span class="line">    x = np.zeros(n)</span><br><span class="line">    <span class="comment"># 解下三角矩阵方程 Ly = b</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        y[i] = b[i] - np.dot(L[i, :i], y[:i])</span><br><span class="line">    <span class="comment"># 解上三角矩阵方程 Ux = y</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        x[i] = (y[i] - np.dot(U[i, i + <span class="number">1</span> :], x[i + <span class="number">1</span> :])) / U[i, i]</span><br><span class="line">    <span class="keyword">return</span> x, y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_mat</span>(<span class="params">A</span>):</span><br><span class="line">    n = A.shape[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;A[i][j]:<span class="number">.5</span>f&#125;</span>&quot;</span>, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_vec</span>(<span class="params">b</span>):</span><br><span class="line">    n = b.shape[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;b[i]:<span class="number">.5</span>f&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 输入矩阵</span></span><br><span class="line">    A = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">float</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">    A = np.array(A)</span><br><span class="line"></span><br><span class="line">    b = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">float</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">    b = np.array(b)</span><br><span class="line"></span><br><span class="line">    n = <span class="built_in">int</span>(math.sqrt(A.shape[<span class="number">0</span>]))</span><br><span class="line">    A = A.reshape(n, n)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># LU 分解</span></span><br><span class="line">    L, U = LU(A)</span><br><span class="line">    <span class="comment"># 求解</span></span><br><span class="line">    x, y = solve(L, U, b)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;L:&quot;</span>)</span><br><span class="line">    print_mat(L)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;U:&quot;</span>)</span><br><span class="line">    print_mat(U)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;y:&quot;</span>)</span><br><span class="line">    print_vec(y)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;x:&quot;</span>)</span><br><span class="line">    print_vec(x)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="追赶法求解三对角线性方程组"><a class="markdownIt-Anchor" href="#追赶法求解三对角线性方程组"></a> 追赶法求解三对角线性方程组</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 追赶法求解线性方程组</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 三对角矩阵追赶法LU分解</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">LU</span>(<span class="params">A</span>):</span><br><span class="line">    <span class="comment"># 获取矩阵大小</span></span><br><span class="line">    n = A.shape[<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 初始化 L 和 U 矩阵</span></span><br><span class="line">    L = np.identity(n)</span><br><span class="line">    U = np.zeros((n, n))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 进行分解</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># 第一行特殊处理</span></span><br><span class="line">            U[i][i] = A[i][i]</span><br><span class="line">            U[i][i+<span class="number">1</span>] = A[i][i+<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">elif</span> i == n-<span class="number">1</span>:</span><br><span class="line">            <span class="comment"># 最后一行特殊处理</span></span><br><span class="line">            L[i][i-<span class="number">1</span>] = A[i][i-<span class="number">1</span>] / U[i-<span class="number">1</span>][i-<span class="number">1</span>]</span><br><span class="line">            U[i][i] = A[i][i] - L[i][i-<span class="number">1</span>] * A[i-<span class="number">1</span>][i]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 中间行通用处理</span></span><br><span class="line">            L[i][i-<span class="number">1</span>] = A[i][i-<span class="number">1</span>] / U[i-<span class="number">1</span>][i-<span class="number">1</span>]</span><br><span class="line">            U[i][i] = A[i][i] - L[i][i-<span class="number">1</span>] * A[i-<span class="number">1</span>][i]</span><br><span class="line">            U[i][i+<span class="number">1</span>] = A[i][i+<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> L, U</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">L, U, b</span>):</span><br><span class="line">    <span class="comment"># 解下三角矩阵方程 Ly = b</span></span><br><span class="line">    n = <span class="built_in">len</span>(L)</span><br><span class="line">    y = np.zeros(n)</span><br><span class="line">    y[<span class="number">0</span>] = b[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">        y[i] = b[i] - L[i][i-<span class="number">1</span>] * y[i-<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 解上三角矩阵方程 Ux = y</span></span><br><span class="line">    x = np.zeros(n)</span><br><span class="line">    x[n-<span class="number">1</span>] = y[n-<span class="number">1</span>] / U[n-<span class="number">1</span>][n-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">2</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        x[i] = (y[i] - U[i][i+<span class="number">1</span>] * x[i+<span class="number">1</span>]) / U[i][i]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> x, y</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_mat</span>(<span class="params">A</span>):</span><br><span class="line">    n = A.shape[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;A[i][j]:<span class="number">.5</span>f&#125;</span>&quot;</span>, end = <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_vec</span>(<span class="params">b</span>):</span><br><span class="line">    n = b.shape[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;b[i]:<span class="number">.5</span>f&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 输入矩阵</span></span><br><span class="line">    A = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">float</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">    A = np.array(A)</span><br><span class="line">    b = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">float</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">    b = np.array(b)</span><br><span class="line">    n = b.shape[<span class="number">0</span>]</span><br><span class="line">    A = A.reshape(n, n)</span><br><span class="line">    <span class="comment"># LU 分解</span></span><br><span class="line">    L, U = LU(A)</span><br><span class="line">    <span class="comment"># 求解</span></span><br><span class="line">    x, y = solve(L, U, b)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;L:&quot;</span>)</span><br><span class="line">    print_mat(L)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;U:&quot;</span>)</span><br><span class="line">    print_mat(U)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;y:&quot;</span>)</span><br><span class="line">    print_vec(y)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;x:&quot;</span>)</span><br><span class="line">    print_vec(x)</span><br></pre></td></tr></table></figure>
<h3 id="平方根法求解线性方程组"><a class="markdownIt-Anchor" href="#平方根法求解线性方程组"></a> 平方根法求解线性方程组</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 平方根法求解线性方程组</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cholesky</span>(<span class="params">A</span>):</span><br><span class="line">    n = A.shape[<span class="number">0</span>]</span><br><span class="line">    L = np.zeros((n, n))</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        s = <span class="built_in">sum</span>(L[j, k]*L[j, k] <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(j))</span><br><span class="line">        L[j, j] = np.sqrt(A[j, j] - s)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(j, n):</span><br><span class="line">            t = <span class="built_in">sum</span>(L[i, k]*L[j, k] <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(j))</span><br><span class="line">            L[i, j] = (A[i, j] - t) / L[j, j]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> L</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">L, b</span>):</span><br><span class="line">    n = b.shape[<span class="number">0</span>]</span><br><span class="line">    y = np.zeros(n)</span><br><span class="line">    x = np.zeros(n)</span><br><span class="line"></span><br><span class="line">    y[<span class="number">0</span>] = b[<span class="number">0</span>] / L[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">        y[i] = (b[i] - <span class="built_in">sum</span>(L[i][k]*y[k] <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(i))) / L[i][i]</span><br><span class="line"></span><br><span class="line">    x[n-<span class="number">1</span>] = y[n-<span class="number">1</span>] / L[n-<span class="number">1</span>][n-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">2</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        x[i] = (y[i] - <span class="built_in">sum</span>(L[k][i]*x[k] <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>, n))) / L[i][i]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> x, y</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_mat</span>(<span class="params">A</span>):</span><br><span class="line">    n = A.shape[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;A[i][j]:<span class="number">.5</span>f&#125;</span>&quot;</span>, end = <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_vec</span>(<span class="params">b</span>):</span><br><span class="line">    n = b.shape[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;b[i]:<span class="number">.5</span>f&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 输入矩阵</span></span><br><span class="line">    A = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">float</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">    A = np.array(A)</span><br><span class="line">    b = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">float</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">    b = np.array(b)</span><br><span class="line">    n = b.shape[<span class="number">0</span>]</span><br><span class="line">    A = A.reshape(n, n)</span><br><span class="line">    </span><br><span class="line">    L = cholesky(A)</span><br><span class="line">    <span class="comment"># 求解</span></span><br><span class="line">    x, y = solve(L, b)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;L:&quot;</span>)</span><br><span class="line">    print_mat(L)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;y:&quot;</span>)</span><br><span class="line">    print_vec(y)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;x:&quot;</span>)</span><br><span class="line">    print_vec(x)</span><br><span class="line">    </span><br></pre></td></tr></table></figure>
<h3 id="jacobi迭代法求解线性方程组"><a class="markdownIt-Anchor" href="#jacobi迭代法求解线性方程组"></a> Jacobi迭代法求解线性方程组</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Jacobi法求解线性方程组</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inf_norm</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">abs</span>(x))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">jacobi</span>(<span class="params">A, b, x0</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(b)</span><br><span class="line">    x = x0</span><br><span class="line">    x_new = np.zeros(n, dtype=np.float32)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                <span class="keyword">if</span> k != j:</span><br><span class="line">                    <span class="built_in">sum</span> += A[j, k] * x[k]</span><br><span class="line">            x_new[j] = (b[j] - <span class="built_in">sum</span>) / A[j, j]</span><br><span class="line">        <span class="keyword">if</span> inf_norm(x - x_new) &lt; <span class="number">1e-5</span>:</span><br><span class="line">            x = x_new.copy()</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        x = x_new.copy()</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_vec</span>(<span class="params">b</span>):</span><br><span class="line">    n = b.shape[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;b[i]:<span class="number">.5</span>f&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 输入矩阵</span></span><br><span class="line">    A = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">float</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">    A = np.array(A)</span><br><span class="line">    b = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">float</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">    b = np.array(b)</span><br><span class="line">    n = b.shape[<span class="number">0</span>]</span><br><span class="line">    A = A.reshape(n, n)</span><br><span class="line">    x0 = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">float</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">    x0 = np.array(x0)</span><br><span class="line">    </span><br><span class="line">    x = jacobi(A, b, x0)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;x:&quot;</span>)</span><br><span class="line">    print_vec(x)</span><br></pre></td></tr></table></figure>
<h3 id="gauss-seidel迭代法求解线性方程组"><a class="markdownIt-Anchor" href="#gauss-seidel迭代法求解线性方程组"></a> Gauss-Seidel迭代法求解线性方程组</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># G-S法求解线性方程组</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inf_norm</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">abs</span>(x))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">GS</span>(<span class="params">A, b, x0</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(b)</span><br><span class="line">    x = x0.copy()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                <span class="keyword">if</span> k != j:</span><br><span class="line">                    <span class="built_in">sum</span> += A[j, k] * x[k]</span><br><span class="line">            x[j] = (b[j] - <span class="built_in">sum</span>) / A[j, j]</span><br><span class="line">        <span class="keyword">if</span> inf_norm(x - x0) &lt; <span class="number">1e-5</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        x0 = x.copy()</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_vec</span>(<span class="params">b</span>):</span><br><span class="line">    n = b.shape[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;b[i]:<span class="number">.5</span>f&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 输入矩阵</span></span><br><span class="line">    A = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">float</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">    A = np.array(A)</span><br><span class="line">    b = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">float</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">    b = np.array(b)</span><br><span class="line">    n = b.shape[<span class="number">0</span>]</span><br><span class="line">    A = A.reshape(n, n)</span><br><span class="line">    x0 = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">float</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">    x0 = np.array(x0)</span><br><span class="line">    </span><br><span class="line">    x = GS(A, b, x0)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;x:&quot;</span>)</span><br><span class="line">    print_vec(x)</span><br></pre></td></tr></table></figure>
<h2 id="实验四"><a class="markdownIt-Anchor" href="#实验四"></a> 实验四</h2>
<h3 id="拉格朗日插值法"><a class="markdownIt-Anchor" href="#拉格朗日插值法"></a> 拉格朗日插值法</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 拉格朗日插值</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lagrange</span>(<span class="params">x, y, x0</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(x)</span><br><span class="line">    s = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        t = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">if</span> i != j:</span><br><span class="line">                t *= (x0 - x[j]) / (x[i] - x[j])</span><br><span class="line">        s += t * y[i]</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    x = [<span class="number">0.0</span>,<span class="number">0.1</span>,<span class="number">0.195</span>,<span class="number">0.3</span>,<span class="number">0.401</span>,<span class="number">0.5</span>]</span><br><span class="line">    y = [<span class="number">0.39894</span>,<span class="number">0.39695</span>,<span class="number">0.39142</span>,<span class="number">0.38138</span>,<span class="number">0.36812</span>,<span class="number">0.35206</span>]</span><br><span class="line">    x0 = <span class="built_in">float</span>(<span class="built_in">input</span>())</span><br><span class="line">    y0 = lagrange(x, y, x0)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;y0:<span class="number">.5</span>f&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="牛顿插值法"><a class="markdownIt-Anchor" href="#牛顿插值法"></a> 牛顿插值法</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 牛顿型插值多项式</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="comment"># 差商</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">diff_quotient</span>(<span class="params">x, y</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(x)</span><br><span class="line">    d = [[<span class="number">0</span>] * n <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        d[i][<span class="number">0</span>] = y[i]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - j):</span><br><span class="line">            d[i][j] = (d[i + <span class="number">1</span>][j - <span class="number">1</span>] - d[i][j - <span class="number">1</span>]) / (x[i + j] - x[i])</span><br><span class="line">    <span class="keyword">return</span> d</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calc_diff_quotient</span>(<span class="params">d, x0</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(d)</span><br><span class="line">    s = d[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">        t = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i):</span><br><span class="line">            t *= (x0 - x[j])</span><br><span class="line">        s += d[<span class="number">0</span>][i] * t</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 差分</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">diff</span>(<span class="params">x, y</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(x)</span><br><span class="line">    d = [[<span class="number">0</span>] * n <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        d[i][<span class="number">0</span>] = y[i]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - j):</span><br><span class="line">            d[i][j] = d[i + <span class="number">1</span>][j - <span class="number">1</span>] - d[i][j - <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> d</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calc_diff</span>(<span class="params">x, d, x0</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(d)</span><br><span class="line">    s = d[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">    t = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, n):</span><br><span class="line">        <span class="keyword">if</span> x0 &gt; x[i]:</span><br><span class="line">            t = (x0 - x[i]) / (x[<span class="number">1</span>] - x[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">        tt = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i):</span><br><span class="line">            tt *= (t - j)</span><br><span class="line">        s += d[<span class="number">0</span>][i] * tt / math.factorial(i)</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_mat</span>(<span class="params">mat</span>):</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> mat:</span><br><span class="line">        <span class="keyword">for</span> e <span class="keyword">in</span> row:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;e:<span class="number">.5</span>f&#125;</span>&quot;</span>, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    x = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">float</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">    y = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">float</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">    x0 = <span class="built_in">float</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line">    d_fq = diff_quotient(x, y)</span><br><span class="line">    y0_fq = calc_diff_quotient(d_fq, x0)</span><br><span class="line">    d_ff = diff(x, y)</span><br><span class="line">    y0_ff = calc_diff(x, d_ff, x0)</span><br><span class="line"></span><br><span class="line">    print_mat(d_fq)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;y0_fq:<span class="number">.5</span>f&#125;</span>&quot;</span>)</span><br><span class="line">    print_mat(d_ff)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;y0_ff:<span class="number">.5</span>f&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="三次样条插值"><a class="markdownIt-Anchor" href="#三次样条插值"></a> 三次样条插值</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 三次样条插值</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 三对角矩阵追赶法LU分解</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">LU</span>(<span class="params">A</span>):</span><br><span class="line">    <span class="comment"># 获取矩阵大小</span></span><br><span class="line">    n = A.shape[<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 初始化 L 和 U 矩阵</span></span><br><span class="line">    L = np.identity(n)</span><br><span class="line">    U = np.zeros((n, n))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 进行分解</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># 第一行特殊处理</span></span><br><span class="line">            U[i][i] = A[i][i]</span><br><span class="line">            U[i][i+<span class="number">1</span>] = A[i][i+<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">elif</span> i == n-<span class="number">1</span>:</span><br><span class="line">            <span class="comment"># 最后一行特殊处理</span></span><br><span class="line">            L[i][i-<span class="number">1</span>] = A[i][i-<span class="number">1</span>] / U[i-<span class="number">1</span>][i-<span class="number">1</span>]</span><br><span class="line">            U[i][i] = A[i][i] - L[i][i-<span class="number">1</span>] * A[i-<span class="number">1</span>][i]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 中间行通用处理</span></span><br><span class="line">            L[i][i-<span class="number">1</span>] = A[i][i-<span class="number">1</span>] / U[i-<span class="number">1</span>][i-<span class="number">1</span>]</span><br><span class="line">            U[i][i] = A[i][i] - L[i][i-<span class="number">1</span>] * A[i-<span class="number">1</span>][i]</span><br><span class="line">            U[i][i+<span class="number">1</span>] = A[i][i+<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> L, U</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">L, U, b</span>):</span><br><span class="line">    <span class="comment"># 解下三角矩阵方程 Ly = b</span></span><br><span class="line">    n = <span class="built_in">len</span>(L)</span><br><span class="line">    y = np.zeros(n)</span><br><span class="line">    y[<span class="number">0</span>] = b[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">        y[i] = b[i] - L[i][i-<span class="number">1</span>] * y[i-<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 解上三角矩阵方程 Ux = y</span></span><br><span class="line">    x = np.zeros(n)</span><br><span class="line">    x[n-<span class="number">1</span>] = y[n-<span class="number">1</span>] / U[n-<span class="number">1</span>][n-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">2</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        x[i] = (y[i] - U[i][i+<span class="number">1</span>] * x[i+<span class="number">1</span>]) / U[i][i]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> x, y</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">spline3</span>(<span class="params">x, y, l, r, x0</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(x)</span><br><span class="line">    h = np.zeros(n)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">        h[i] = x[i] - x[i - <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    mul = np.zeros(n)</span><br><span class="line">    lam = np.zeros(n)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n - <span class="number">1</span>):</span><br><span class="line">        mul[i] = h[i] / (h[i] + h[i + <span class="number">1</span>])</span><br><span class="line">        lam[i] = <span class="number">1</span> - mul[i]</span><br><span class="line"></span><br><span class="line">    g = np.zeros(n)</span><br><span class="line">    g[<span class="number">0</span>] = <span class="number">6</span> / h[<span class="number">1</span>] * ((y[<span class="number">1</span>] - y[<span class="number">0</span>]) / h[<span class="number">1</span>] - l)</span><br><span class="line">    g[-<span class="number">1</span>] = <span class="number">6</span> / h[-<span class="number">1</span>] * (r - (y[-<span class="number">1</span>] - y[-<span class="number">2</span>]) / h[-<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n - <span class="number">1</span>):</span><br><span class="line">        g[i] = <span class="number">6</span> / (h[i] + h[i + <span class="number">1</span>]) * ((y[i + <span class="number">1</span>] - y[i]) / h[i + <span class="number">1</span>] - (y[i] - y[i - <span class="number">1</span>]) / h[i])</span><br><span class="line"></span><br><span class="line">    d = np.zeros(n)</span><br><span class="line">    d[<span class="number">0</span>] = <span class="number">6</span> * ((y[<span class="number">1</span>] - y[<span class="number">0</span>]) / h[<span class="number">1</span>] - l) / h[<span class="number">1</span>]</span><br><span class="line">    d[n - <span class="number">1</span>] = <span class="number">6</span> * (r - (y[n - <span class="number">1</span>] - y[n - <span class="number">2</span>]) / h[n - <span class="number">1</span>]) / h[n - <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    A = np.identity(n) * <span class="number">2</span></span><br><span class="line">    A[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">    A[-<span class="number">1</span>][-<span class="number">2</span>] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n - <span class="number">1</span>):</span><br><span class="line">        A[i][i - <span class="number">1</span>] = mul[i]</span><br><span class="line">        A[i][i + <span class="number">1</span>] = lam[i]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># M = np.linalg.solve(A, g)</span></span><br><span class="line">    L, U = LU(A)</span><br><span class="line">    M, _ = solve(L, U, g)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(A)</span></span><br><span class="line">    <span class="comment"># print(g)</span></span><br><span class="line">    <span class="comment"># print(M)</span></span><br><span class="line"></span><br><span class="line">    y0 = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> x0 &gt;= x[i] <span class="keyword">and</span> x0 &lt;= x[i + <span class="number">1</span>]:</span><br><span class="line">            y0 += M[i] * (x[i + <span class="number">1</span>] - x0)**<span class="number">3</span> / (<span class="number">6</span> * h[i + <span class="number">1</span>]) </span><br><span class="line">            y0 += M[i + <span class="number">1</span>] * (x0 - x[i])**<span class="number">3</span> / (<span class="number">6</span> * h[i + <span class="number">1</span>]) </span><br><span class="line">            y0 += (y[i] - M[i] * h[i + <span class="number">1</span>]**<span class="number">2</span> / <span class="number">6</span>) * (x[i + <span class="number">1</span>] - x0) / h[i + <span class="number">1</span>]</span><br><span class="line">            y0 += (y[i + <span class="number">1</span>] - M[i + <span class="number">1</span>] * h[i + <span class="number">1</span>]**<span class="number">2</span> / <span class="number">6</span>) * (x0 - x[i]) / h[i + <span class="number">1</span>]</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> M, y0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_vec</span>(<span class="params">b</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> b:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;i:<span class="number">.5</span>f&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    x = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">float</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">    y = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">float</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">    l, r = <span class="built_in">map</span>(<span class="built_in">float</span>, <span class="built_in">input</span>().split())</span><br><span class="line">    x0 = <span class="built_in">float</span>(<span class="built_in">input</span>())</span><br><span class="line">    </span><br><span class="line">    M, y0 = spline3(x, y, l, r, x0)</span><br><span class="line">    print_vec(M)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;y0:<span class="number">.5</span>f&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>数值计算</tag>
      </tags>
  </entry>
</search>
